package com.base100.lex100.entity;
// Generated by Expand 4.0.0 

import static javax.persistence.GenerationType.SEQUENCE;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.jboss.seam.Component;

import com.base100.expand.annotation.BooleanType;
import com.base100.expand.annotation.ControlType;
import com.base100.expand.annotation.DataDefinition;
import com.base100.expand.annotation.EntityDefinition;
import com.base100.expand.annotation.EntityGroup;
import com.base100.expand.annotation.GenerationProperty;
import com.base100.expand.annotation.Hidden;
import com.base100.expand.annotation.InteractiveModuleProperties;
import com.base100.expand.annotation.RestrictedEntity;
import com.base100.expand.annotation.SelectItem;
import com.base100.expand.annotation.SelectItems;
import com.base100.expand.annotation.index.IndexField;
import com.base100.lex100.component.audit.AbstractLogicalDeletion;
import com.base100.lex100.component.identity.IdentificableEntityListener;
import com.base100.lex100.controller.entity.oficinaCargaExp.OficinaCargaExpHome;
import com.base100.lex100.manager.auditoria.IAuditableOperation;
import com.base100.lex100.manager.auditoria.OficinaCargaExpEntityListener;
import com.base100.lex100.manager.oficina.OficinaManager;

/**
 * OficinaCargaExp generated by Expand 4.0.0
 */
@Entity
@RestrictedEntity
@EntityDefinition(label = "Carga Expedientes", listLabel = "Carga de Expedientes por Oficina", inlineEdition=true, noListProperties=BooleanType.False, noSearchProperties=BooleanType.False,noEditProperties=BooleanType.False)
@EntityGroup("MesaEntrada")
@InteractiveModuleProperties( {
		@GenerationProperty(propertyName = "gridColumns", propertyValue = "1") })
@Table(name = "OFICINA_CARGA_EXP")
@EntityListeners({IdentificableEntityListener.class, OficinaCargaExpEntityListener.class})
public class OficinaCargaExp extends AbstractLogicalDeletion implements java.io.Serializable, IIdentificable, IAuditableOperation {

     private Integer id;
     private String rubro;
     private Integer cargaTrabajo;
     private Integer numeroExpedientes;
     private Integer factorSuma;
     private boolean inhibido;
     private String tipoOficina;
     private String uuid;
     private Materia materia;
     private Oficina oficina;
     private Boolean turno; 
     private Sorteo sorteo;
     private TipoBolillero tipoBolillero;

     private String descripcionRubro;
     private String auditableOperation;
     private String auditableUsuario;
     private Expediente auditableExpediente;

    public OficinaCargaExp() {
    }
	
    public OficinaCargaExp(String rubro, Integer cargaTrabajo, Integer numeroExpedientes, Integer factorSuma, boolean inhibido, String tipoOficina, String uuid, Materia materia, Oficina oficina, TipoBolillero tipoBolillero) {
        this.rubro = rubro;
        this.cargaTrabajo = cargaTrabajo;
        this.numeroExpedientes = numeroExpedientes;
        this.factorSuma = factorSuma;
        this.inhibido = inhibido;
        this.tipoOficina = tipoOficina;
        this.uuid = uuid;
        this.materia = materia;
        this.oficina = oficina;
       this.tipoBolillero = tipoBolillero;
     }

    @SequenceGenerator(name="generator", sequenceName="S_OFICINA_CARGA_EXP", allocationSize=1)@Id @GeneratedValue(strategy=SEQUENCE, generator="generator")    
	@DataDefinition(label = "Id OficinaCargaExp")
    @Column(name="ID_OFICINA_CARGA_EXP", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }
    
	@DataDefinition(label = "Rubro")
    @Column(name="RUBRO", length=10)
    public String getRubro() {
        return this.rubro;
    }
    
    public void setRubro(String rubro) {
    	if (rubro != this.rubro){
    		setDescripcionRubro(null);
    	}
        this.rubro = rubro;
    }
    
	@DataDefinition(label = "Carga de Trabajo")
    @Column(name="CARGA_TRABAJO")
    public Integer getCargaTrabajo() {
        return this.cargaTrabajo;
    }
    
    public void setCargaTrabajo(Integer cargaTrabajo) {
        this.cargaTrabajo = cargaTrabajo;
    }
    
	@DataDefinition(label = "Número Expedientes")
    @Column(name="NUMERO_EXPEDIENTES")
    public Integer getNumeroExpedientes() {
        return this.numeroExpedientes;
    }
    
    public void setNumeroExpedientes(Integer numeroExpedientes) {
        this.numeroExpedientes = numeroExpedientes;
    }
    
	@DataDefinition(label = "Factor Suma")
    @Column(name="FACTOR_SUMA")
    public Integer getFactorSuma() {
        return this.factorSuma;
    }
    
    public void setFactorSuma(Integer factorSuma) {
        this.factorSuma = factorSuma;
    }
    
	@DataDefinition(label = "Inhibido", defaultValue = "false")
    @Column(name="INHIBIDO", nullable=false)
    public boolean isInhibido() {
        return this.inhibido;
    }
    
    public void setInhibido(boolean inhibido) {
        this.inhibido = inhibido;
    }
    
    @DataDefinition(label = "Tipo Oficina", defaultValue = "J")
	@SelectItems(enumeration = "tipoOficinaCargaEnumeration",control=ControlType.Droplist,
		value={
			@SelectItem(value = "J",label = "Juzgado"),
			@SelectItem(value = "S",label = "Sala")
		})
    @Column(name="TIPO_OFICINA", length=1)
    public String getTipoOficina() {
		return tipoOficina;
	}

	public void setTipoOficina(String tipoOficina) {
		this.tipoOficina = tipoOficina;
	}

    @DataDefinition(label = "UUID",displayLength = 10,disabled = true)
	@IndexField
	@Hidden
    @Column(name="UUID", unique=true, length=40)
    public String getUuid() {
        return this.uuid;
    }
    
    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

	@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="ID_MATERIA")
	@SelectItems(enumeration = "materiaEnumeration",control=ControlType.Droplist)
    public Materia getMateria() {
        return this.materia;
    }
    
    public void setMateria(Materia materia) {
    	if (materia != this.materia){
    		setDescripcionRubro(null);
    	}
        this.materia = materia;
    }

    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="ID_OFICINA")
	@DataDefinition(label = "Oficina", filteredByGlobalSelection=false)
    public Oficina getOficina() {
        return this.oficina;
    }
    
    public void setOficina(Oficina oficina) {
    	if (oficina != this.oficina){
    		setDescripcionRubro(null);
    	}
        this.oficina = oficina;
    }

	@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="ID_TIPO_BOLILLERO", nullable=false)
	@SelectItems(enumeration = "tipoBolilleroEnumeration",control=ControlType.Droplist)
    public TipoBolillero getTipoBolillero() {
        return this.tipoBolillero;
    }
    
    public void setTipoBolillero(TipoBolillero tipoBolillero) {
        this.tipoBolillero = tipoBolillero;
    }

    @Transient
	public Boolean getTurno() {
		if (turno == null) {
			turno = OficinaManager.instance().isTurnoSorteo(oficina, sorteo);
		}
		return turno;
	}

	public void setTurno(Boolean turno) {
		this.turno = turno;
	}

    @Transient
	public String getDescripcionRubro() {
		if (descripcionRubro == null) {
			OficinaCargaExpHome oficinaCargaExpHome = (OficinaCargaExpHome) Component.getInstance(OficinaCargaExpHome.class, true);
			descripcionRubro = oficinaCargaExpHome.getDescripcionRubro(this);
		}
		return descripcionRubro;
	}

	public void setDescripcionRubro(String descripcionRubro) {
		this.descripcionRubro = descripcionRubro;
	}

	@Transient
	public String getAuditableOperation() {
		return auditableOperation;
	}

	public void setAuditableOperation(String auditableOperation) {
		this.auditableOperation = auditableOperation;
	}

	@Transient
	public String getAuditableUsuario() {
		return auditableUsuario;
	}

	public void setAuditableUsuario(String auditableUsuario) {
		this.auditableUsuario = auditableUsuario;
	}

	@Transient
	public Expediente getAuditableExpediente() {
		return auditableExpediente;
	}

	public void setAuditableExpediente(Expediente auditableExpediente) {
		this.auditableExpediente = auditableExpediente;
	}
    
    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="ID_SORTEO")
	@DataDefinition(label = "Sorteo", filteredByGlobalSelection=false)
    public Sorteo getSorteo() {
        return this.sorteo;
    }
    
    public void setSorteo(Sorteo sorteo) {
        this.sorteo = sorteo;
    }

}


