package com.base100.lex100.entity;
// Generated by Expand 4.0.0 

import static javax.persistence.GenerationType.SEQUENCE;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.validator.Min;

import com.base100.expand.annotation.BooleanType;
import com.base100.expand.annotation.ControlType;
import com.base100.expand.annotation.DataDefinition;
import com.base100.expand.annotation.EntityDefinition;
import com.base100.expand.annotation.EntityGroup;
import com.base100.expand.annotation.EntityIcon;
import com.base100.expand.annotation.GenerationProperty;
import com.base100.expand.annotation.Hidden;
import com.base100.expand.annotation.InteractiveModuleProperties;
import com.base100.expand.annotation.RestrictedEntity;
import com.base100.expand.annotation.SelectItem;
import com.base100.expand.annotation.SelectItems;
import com.base100.expand.annotation.index.IndexField;
import com.base100.lex100.component.audit.AbstractLogicalDeletion;
import com.base100.lex100.component.identity.IdentificableEntityListener;
import com.base100.lex100.manager.auditoria.IAuditableOperation;
import com.base100.lex100.manager.auditoria.SorteoEntityListener;
import com.base100.lex100.mesaEntrada.sorteo.MesaSorteo;

/**
 * Sorteo generated by Expand 4.0.0
 */
@Entity
@EntityDefinition(label = "Sorteo", listLabel = "Sorteo", noListProperties=BooleanType.False, noSearchProperties=BooleanType.False)
@EntityGroup("MesaEntrada")
@EntityIcon
@RestrictedEntity
@InteractiveModuleProperties( {
		@GenerationProperty(propertyName = "gridColumns", propertyValue = "1") })
@Table(name = "SORTEO")
@EntityListeners({IdentificableEntityListener.class, SorteoEntityListener.class})
public class Sorteo extends AbstractLogicalDeletion implements java.io.Serializable, IIdentificable, IAuditableOperation {
	 public static final String ORDEN_CIRCULACION_CODIGO_SORTEO = "ORDEN_CIRCULACION";

     private Integer id;
     private String codigo;
     private String tipoSorteo;
     private String codigoMesa;
     private String descripcion;
     private String rubros;
     private String rubrosAsignacion;
     private int conTurno;
     private Integer bolasPorOficina;
     private int rangoMinimos;
     private int minimoNumeroBolas;
     private String uuid;
     private Camara camara;
     private Materia materia;
     private TipoInstancia tipoInstancia;
     private TipoOficina tipoOficina;
     private Competencia competencia;
     private String auditableOperation;
     private String grupoMateria;
     private String tipoRadicacion;
     private List<OficinaSorteo> oficinaSorteoList = new ArrayList<OficinaSorteo>(0);
     private List<TurnoOficina> turnoOficinaList = new ArrayList<TurnoOficina>(0);
     private List<TipoBolillero> tipoBolilleroList = new ArrayList<TipoBolillero>(0);

    public Sorteo() {
    }
	
    public Sorteo(int conTurno, TipoInstancia tipoInstancia) {
        this.conTurno = conTurno;
        this.tipoInstancia = tipoInstancia;
    }

    public Sorteo(String codigo, String descripcion, int conTurno, Integer bolasPorOficina, String uuid, Camara camara, Materia materia, Competencia competencia, TipoInstancia tipoInstancia, List<OficinaSorteo> oficinaSorteoList) {
       this.codigo = codigo;
       this.descripcion = descripcion;
       this.conTurno = conTurno;
       this.bolasPorOficina = bolasPorOficina;
       this.uuid = uuid;
       this.camara = camara;
       this.materia = materia;
       this.competencia = competencia;
       this.tipoInstancia = tipoInstancia;
       this.oficinaSorteoList = oficinaSorteoList;
    }

    @SequenceGenerator(name="generator", sequenceName="S_SORTEO", allocationSize=1)@Id @GeneratedValue(strategy=SEQUENCE, generator="generator")    
	@DataDefinition(label = "Id Sorteo")
    @Column(name="ID_SORTEO", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }
    
	@DataDefinition(label = " Sorteo")
    @Column(name="CODIGO_SORTEO", length=64, nullable=false)
    public String getCodigo() {
        return this.codigo;
    }
    
    public void setCodigo(String codigo) {
        this.codigo = codigo;
    }
    
	@DataDefinition(label = "Tipo Sorteo")
    @Column(name="TIPO_SORTEO", length=50)
    public String getTipoSorteo() {
        return this.tipoSorteo;
    }
    
    public void setTipoSorteo(String tipoSorteo) {
        this.tipoSorteo = tipoSorteo;
    }

    @DataDefinition(label = "Codigo Mesa")
    @Column(name="CODIGO_MESA", length=64)
    public String getCodigoMesa() {
        return this.codigoMesa;
    }
    
    public void setCodigoMesa(String codigoMesa) {
        this.codigoMesa = codigoMesa;
    }

    @DataDefinition(label = "Descripcion Sorteo", descriptionColumn=true)
    @Column(name="DESCRIPCION_SORTEO", length=200)
    public String getDescripcion() {
        return this.descripcion;
    }
    
    public void setDescripcion(String descripcion) {
        this.descripcion = descripcion;
    }

    @DataDefinition(label = "Rubros")
    @Column(name="RUBROS", length=256)
    public String getRubros() {
        return this.rubros;
    }
    
    public void setRubros(String rubros) {
        this.rubros = rubros;
    }
    
    @DataDefinition(label = "Rubros")
    @Column(name="RUBROS_ASIGNACION", length=256)
    public String getRubrosAsignacion() {
        return this.rubrosAsignacion;
    }
    
    public void setRubrosAsignacion(String rubrosAsignacion) {
        this.rubrosAsignacion = rubrosAsignacion;
    }

    @DataDefinition(label = "Con Turno")
	@SelectItems(enumeration = "turnoSorteoEnumeration",control=ControlType.Radio,
		value={
			@SelectItem(value = "0",label = "Sin Turno"),
			@SelectItem(value = "1",label = "Con Turno Manual"),
			@SelectItem(value = "2",label = "Con Turno Automatico"),
			@SelectItem(value = "3",label = "Con Turno Continuo")
		})
    @Column(name="CON_TURNO", nullable=false)
    public int getConTurno() {
        return this.conTurno;
    }
    
    public void setConTurno(int conTurno) {
        this.conTurno = conTurno;
    }
    
	@DataDefinition(label = "Bolas Por Oficina")
    @Column(name="BOLAS_POR_OFICINA")
    public Integer getBolasPorOficina() {
        return this.bolasPorOficina;
    }
    
    public void setBolasPorOficina(Integer bolasPorOficina) {
        this.bolasPorOficina = bolasPorOficina;
    }

    @DataDefinition(label = "UUID",displayLength = 10,disabled = true)
	@IndexField
	@Hidden
    @Column(name="UUID", unique=true, length=40)
    public String getUuid() {
        return this.uuid;
    }
    
    public void setUuid(String uuid) {
        this.uuid = uuid;
    }
    
	@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="ID_CAMARA")
	@SelectItems(enumeration = "camaraEnumeration",control=ControlType.Droplist)
    public Camara getCamara() {
        return this.camara;
    }
    
    public void setCamara(Camara camara) {
        this.camara = camara;
    }

	@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="ID_MATERIA")
	@SelectItems(enumeration = "materiaEnumeration",control=ControlType.Droplist)
    public Materia getMateria() {
        return this.materia;
    }
    
    public void setMateria(Materia materia) {
        this.materia = materia;
    }
    
	@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="ID_TIPO_INSTANCIA", nullable=false)
	@SelectItems(enumeration = "tipoInstanciaEnumeration",control=ControlType.Droplist)
    public TipoInstancia getTipoInstancia() {
        return this.tipoInstancia;
    }
    
    public void setTipoInstancia(TipoInstancia tipoInstancia) {
        this.tipoInstancia = tipoInstancia;
    }

	@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="ID_COMPETENCIA")
	@SelectItems(enumeration = "competenciaEnumeration",control=ControlType.Droplist)
    public Competencia getCompetencia() {
        return this.competencia;
    }
    
    public void setCompetencia(Competencia competencia) {
        this.competencia = competencia;
    }

	@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="ID_TIPO_OFICINA", nullable=false)
	@SelectItems(enumeration = "tipoOficinaEnumeration",control=ControlType.Droplist)
    public TipoOficina getTipoOficina() {
        return this.tipoOficina;
    }
    
    public void setTipoOficina(TipoOficina tipoOficina) {
        this.tipoOficina = tipoOficina;
    }

	@OneToMany(fetch=FetchType.LAZY, mappedBy="sorteo")
	@OrderBy("orden")
    public List<OficinaSorteo> getOficinaSorteoList() {
        return this.oficinaSorteoList;
    }
    
    public void setOficinaSorteoList(List<OficinaSorteo> oficinaSorteoList) {
        this.oficinaSorteoList = oficinaSorteoList;
    }

	@OneToMany(fetch=FetchType.LAZY, mappedBy="sorteo")
    public List<TurnoOficina> getTurnoOficinaList() {
        return this.turnoOficinaList;
    }
    
    public void setTurnoOficinaList(List<TurnoOficina> turnoOficinaList) {
        this.turnoOficinaList = turnoOficinaList;
    }

    @Column(name="RANGO_MINIMOS")
    @DataDefinition(label="Rango para cálculo de mínimos", shortLabel="Rango mínimos", defaultValue="0")
    @Min(0)
	public int getRangoMinimos() {
		return rangoMinimos;
	}

	public void setRangoMinimos(int rangoMinimos) {
		this.rangoMinimos = rangoMinimos;
	}
	
    @Column(name="MINIMO_NUMERO_BOLAS")
    @DataDefinition(label="Minimo Numero de Bolas", shortLabel="Minimko Bolas", defaultValue="0")
    @Min(0)
	public int getMinimoNumeroBolas() {
		return minimoNumeroBolas;
	}

	public void setMinimoNumeroBolas(int minimoNumeroBolas) {
		this.minimoNumeroBolas = minimoNumeroBolas;
	}
    
	@Transient
	public String getAuditableOperation() {
		return auditableOperation;
	}

	public void setAuditableOperation(String auditableOperation) {
		this.auditableOperation = auditableOperation;
	}

    @SelectItems(enumeration="grupoMateriaEnumeration", control=ControlType.Droplist,
    		value={
    		@SelectItem(label="Civil",value="C"),
    		@SelectItem(label="Penal",value="P")
    })
	@DataDefinition(label = "Grupo Materia", descriptionColumn=true)
    @Column(name="GRUPO_MATERIA", length=10)
    public String getGrupoMateria() {
        return this.grupoMateria;
    }
    
    public void setGrupoMateria(String grupoMateria) {
        this.grupoMateria = grupoMateria;
    }

    @SelectItems(enumeration="tipoRadicacionEnumeration", control=ControlType.Droplist)
    @Column(name="TIPO_RADICACION", length=10)
	public String getTipoRadicacion() {
		return tipoRadicacion;
	}

	public void setTipoRadicacion(String tipoRadicacion) {
		this.tipoRadicacion = tipoRadicacion;
	}

	@Transient
	public boolean isSorteoOrdenCirculacion(){
			return ORDEN_CIRCULACION_CODIGO_SORTEO.equals(getCodigo());
	}

	@ManyToMany(fetch=FetchType.LAZY)
    @JoinTable(name="TIPO_BOLILLERO_SORTEO", joinColumns = { 
        @JoinColumn(name="ID_SORTEO", updatable=false) }, inverseJoinColumns = { 
        @JoinColumn(name="ID_TIPO_BOLILLERO", updatable=false) })
    public List<TipoBolillero> getTipoBolilleroList() {
        return this.tipoBolilleroList;
    }
    
    public void setTipoBolilleroList(List<TipoBolillero> tipoBolilleroList) {
        this.tipoBolilleroList = tipoBolilleroList;
    }

}


