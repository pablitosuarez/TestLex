package com.base100.lex100.entity;
// Generated by Expand 4.0.0 

import static javax.persistence.GenerationType.SEQUENCE;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.jboss.seam.util.Strings;

import com.base100.expand.annotation.BooleanType;
import com.base100.expand.annotation.ControlType;
import com.base100.expand.annotation.DataDefinition;
import com.base100.expand.annotation.EntityDefinition;
import com.base100.expand.annotation.EntityGroup;
import com.base100.expand.annotation.EntityIcon;
import com.base100.expand.annotation.GenerationProperty;
import com.base100.expand.annotation.Hidden;
import com.base100.expand.annotation.InteractiveModuleProperties;
import com.base100.expand.annotation.RestrictedEntity;
import com.base100.expand.annotation.SelectItem;
import com.base100.expand.annotation.SelectItems;
import com.base100.expand.annotation.index.IndexField;
import com.base100.lex100.component.audit.AbstractLogicalDeletion;
import com.base100.lex100.component.configuration.Configuration;
import com.base100.lex100.component.identity.IdentificableEntityListener;

/**
 * CriterioCnx generated by Expand 4.0.0
 */
@Entity
@EntityDefinition(label = "Criterio de Conexidad", listLabel = "Criterios de Conexidad", noSearchProperties=BooleanType.False)
@EntityGroup("MesaEntrada")
@EntityIcon
@RestrictedEntity
@InteractiveModuleProperties( {
		@GenerationProperty(propertyName = "gridColumns", propertyValue = "1") })
@Table(name = "CRITERIO_CNX")
@EntityListeners({IdentificableEntityListener.class})
public class CriterioCnx extends AbstractLogicalDeletion implements java.io.Serializable, IIdentificable {

    private static final String NULO = null;
	
    private Integer id;
     private String nombre;
     private Boolean excluirObjetosJuicio;
     private Integer prioridad;
     private boolean asigna;
     private boolean dobleInicio;
     private String uuid;
     private Camara camara;
     private Materia materia;
     private ObjetoJuicio objetoJuicio;
     private Tema tema;
     private TipoCausa tipoCausa;
     private List<CondicionCnx> condicionCnxList = new ArrayList<CondicionCnx>(0);
     private List<Conexidad> conexidadList = new ArrayList<Conexidad>(0);
     private List<ObjetoJuicio> objetoJuicioList = new ArrayList<ObjetoJuicio>(0);
     private String tiposCausa;
     private String temas;

     private String codigoAsignacion;
     private String codigoCambioAsignacion;
     private Boolean juicioVoluntario;

     private Boolean ambitoVoluntarios;
     private boolean excluirPersonasJuridicas;

     private boolean ambitoGlobal;

     private Boolean expedientesIniciados;
     private Boolean expedientesEnTramite;
     private Date desdeFecha;
     private Integer aniosAntiguedad;
     private Boolean igualObjetoJuicio;
     private String tiempoFinalizacion;

     
     // Transient
     private List<String> codigosTipoCausaList;
     // Transient
     private List<String> codigosTemaList;
     
     
     
    public CriterioCnx() {
    }

    public CriterioCnx(Camara camara, Materia materia) {
        this.camara = camara;
        this.materia = materia;
    }

    public CriterioCnx(String nombre, Boolean excluirObjetosJuicio, Integer prioridad, String uuid, Camara camara, Materia materia, ObjetoJuicio objetoJuicio, Tema tema, List<CondicionCnx> condicionCnxList, List<Conexidad> conexidadList, List<ObjetoJuicio> objetoJuicioList) {
       this.nombre = nombre;
       this.excluirObjetosJuicio = excluirObjetosJuicio;
       this.prioridad = prioridad;
       this.uuid = uuid;
       this.camara = camara;
       this.materia = materia;
       this.objetoJuicio = objetoJuicio;
       this.tema = tema;
       this.condicionCnxList = condicionCnxList;
       this.conexidadList = conexidadList;
       this.objetoJuicioList = objetoJuicioList;
    }

    @SequenceGenerator(name="generator", sequenceName="S_CRITERIO_CNX", allocationSize=1)@Id @GeneratedValue(strategy=SEQUENCE, generator="generator")    
	@DataDefinition(label = "Id Criterio Cnx")
    @Column(name="ID_CRITERIO_CNX", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }
    
	@DataDefinition(label = "Nombre Criterio Cnx")
    @Column(name="NOMBRE_CRITERIO_CNX", length=100)
    public String getNombre() {
        return this.nombre;
    }
    
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }
    
	@DataDefinition(label = "Excluir Objetos Juicio", defaultValue = "false")
    @Column(name="EXCLUIR_OBJETOS_JUICIO")
    public Boolean getExcluirObjetosJuicio() {
        return this.excluirObjetosJuicio;
    }
    
    public void setExcluirObjetosJuicio(Boolean excluirObjetosJuicio) {
        this.excluirObjetosJuicio = excluirObjetosJuicio;
    }
    
	@DataDefinition(label = "Prioridad")
    @Column(name="PRIORIDAD")
    public Integer getPrioridad() {
        return this.prioridad;
    }
    
    public void setPrioridad(Integer prioridad) {
        this.prioridad = prioridad;
    }
    
	@DataDefinition(label = "Asigna", defaultValue = "false")
    @Column(name="ASIGNA", nullable=false)
	public boolean isAsigna() {
		return asigna;
	}

	public void setAsigna(boolean asigna) {
		this.asigna = asigna;
	}

	@DataDefinition(label = "Doble Inicio", defaultValue = "false")
    @Column(name="DOBLE_INICIO", nullable=false)
	public boolean isDobleInicio() {
		return dobleInicio;
	}

	public void setDobleInicio(boolean dobleInicio) {
		this.dobleInicio = dobleInicio;
	}

    @DataDefinition(label = "UUID",displayLength = 10, rendered="false")
	@IndexField
	@Hidden
    @Column(name="UUID", unique=true, length=40)
    public String getUuid() {
        return this.uuid;
    }
    
    public void setUuid(String uuid) {
        this.uuid = uuid;
    }
    
	@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="ID_CAMARA", nullable=false)
	@SelectItems(enumeration = "camaraEnumeration",control=ControlType.Droplist)
    public Camara getCamara() {
        return this.camara;
    }
    
    public void setCamara(Camara camara) {
        this.camara = camara;
    }
    
	@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="ID_MATERIA")
	@SelectItems(enumeration = "materiaEnumeration",control=ControlType.Droplist)
    public Materia getMateria() {
        return this.materia;
    }
    
    public void setMateria(Materia materia) {
        this.materia = materia;
    }
    
	@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="ID_OBJETO_JUICIO")
	@SelectItems(enumeration = "objetoJuicioEnumeration",control=ControlType.Autocomplete)
    public ObjetoJuicio getObjetoJuicio() {
        return this.objetoJuicio;
    }
    
    public void setObjetoJuicio(ObjetoJuicio objetoJuicio) {
        this.objetoJuicio = objetoJuicio;
    }

	@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="ID_TEMA")
	@SelectItems(enumeration = "temaEnumeration",control=ControlType.Droplist)
    public Tema getTema() {
        return this.tema;
    }
    
    public void setTema(Tema tema) {
        this.tema = tema;
    }

	@OneToMany(fetch=FetchType.LAZY, mappedBy="criterioCnx")
    public List<CondicionCnx> getCondicionCnxList() {
        return this.condicionCnxList;
    }
    
    public void setCondicionCnxList(List<CondicionCnx> condicionCnxList) {
        this.condicionCnxList = condicionCnxList;
    }

	@ManyToMany(fetch=FetchType.LAZY, mappedBy="criterioCnxList")
    public List<Conexidad> getConexidadList() {
        return this.conexidadList;
    }
    
    public void setConexidadList(List<Conexidad> conexidadList) {
        this.conexidadList = conexidadList;
    }

	@ManyToMany(fetch=FetchType.LAZY)
    @JoinTable(name="CRITERIO_OBJETOJUICIO", joinColumns = { 
        @JoinColumn(name="ID_CRITERIO_CNX", updatable=false) }, inverseJoinColumns = { 
        @JoinColumn(name="ID_OBJETO_JUICIO", updatable=false) })
    public List<ObjetoJuicio> getObjetoJuicioList() {
        return this.objetoJuicioList;
    }
    
    public void setObjetoJuicioList(List<ObjetoJuicio> objetoJuicioList) {
        this.objetoJuicioList = objetoJuicioList;
    }

	@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="ID_TIPO_CAUSA")
	@SelectItems(enumeration = "tipoCausaEnumeration",control=ControlType.Droplist)
	public TipoCausa getTipoCausa() {
		return tipoCausa;
	}

	public void setTipoCausa(TipoCausa tipoCausa) {
		this.tipoCausa = tipoCausa;
	}

	@DataDefinition(label = "Tipos Causa")
    @Column(name="TIPOS_CAUSA", length=256)
	public String getTiposCausa() {
		return tiposCausa;
	}

	public void setTiposCausa(String tiposCausa) {
		this.tiposCausa = tiposCausa;
	}

	@DataDefinition(label = "Submaterias")
    @Column(name="TEMAS", length=256)
	public String getTemas() {
		return temas;
	}

	public void setTemas(String temas) {
		this.temas = temas;
	}

	@DataDefinition(label = "Código Asignación")
    @Column(name="CODIGO_ASIGNACION", length=3)
	public String getCodigoAsignacion() {
		return codigoAsignacion;
	}

	public void setCodigoAsignacion(String codigoAsignacion) {
		this.codigoAsignacion = codigoAsignacion;
	}

	@DataDefinition(label = "Código Cambio Asignación")
    @Column(name="CODIGO_CAMBIO_ASIGNACION", length=3)
	public String getCodigoCambioAsignacion() {
		return codigoCambioAsignacion;
	}

	public void setCodigoCambioAsignacion(String codigoCambioAsignacion) {
		this.codigoCambioAsignacion = codigoCambioAsignacion;
	}

	@DataDefinition(label = "Juicio Voluntario")
    @Column(name="JUICIO_VOLUNTARIO")
	public Boolean getJuicioVoluntario() {
		return juicioVoluntario;
	}

	public void setJuicioVoluntario(Boolean juicioVoluntario) {
		this.juicioVoluntario = juicioVoluntario;
	}

	@DataDefinition(label = "Ambito Voluntarios")
    @Column(name="AMBITO_VOLUNTARIOS")
	public Boolean getAmbitoVoluntarios() {
		return ambitoVoluntarios;
	}

	public void setAmbitoVoluntarios(Boolean ambitoVoluntarios) {
		this.ambitoVoluntarios = ambitoVoluntarios;
	}

	@DataDefinition(label = "Excluir Personas Juridicas")
    @Column(name="EXCLUIR_PERSONAS_JURIDICAS", nullable=false)
	public boolean isExcluirPersonasJuridicas() {
		return excluirPersonasJuridicas;
	}

	public void setExcluirPersonasJuridicas(boolean excluirPersonasJuridicas) {
		this.excluirPersonasJuridicas = excluirPersonasJuridicas;
	}

	@DataDefinition(label = "Ámbito Global")
    @Column(name="AMBITO_GLOBAL")
	public boolean isAmbitoGlobal() {
		return ambitoGlobal;
	}

	public void setAmbitoGlobal(boolean ambitoGlobal) {
		this.ambitoGlobal = ambitoGlobal;
	}

	@DataDefinition(label = "Expedientes Iniciados", comment="criterioCnx.expedientesIniciados.comment")
    @SelectItems(enumeration="trueFalseEnumeration", control=ControlType.Droplist)
    @Column(name="EXPEDIENTES_INICIADOS")
	public Boolean getExpedientesIniciados() {
		return expedientesIniciados;
	}

	public void setExpedientesIniciados(Boolean expedientesIniciados) {
		this.expedientesIniciados = expedientesIniciados;
	}

	@DataDefinition(label = "Expedientes en Trámite", comment="criterioCnx.expedientesEnTramite.comment")
    @SelectItems(enumeration="trueFalseEnumeration", control=ControlType.Droplist)
    @Column(name="EXPEDIENTES_TRAMITE")
	public Boolean getExpedientesEnTramite() {
		return expedientesEnTramite;
	}

	public void setExpedientesEnTramite(Boolean expedientesEnTramite) {
		this.expedientesEnTramite = expedientesEnTramite;
	}

    @Temporal(TemporalType.DATE)
	@DataDefinition(label = "Desde Fecha", comment="Fecha mínima de los expedientes entre los que busca conexidad")
    @Column(name="DESDE_FECHA")
	public Date getDesdeFecha() {
		return desdeFecha;
	}

	public void setDesdeFecha(Date desdeFecha) {
		this.desdeFecha = desdeFecha;
	}

	@DataDefinition(label = "Años de Antigüedad", comment="Máximo número de Años de Antigüedad de los expedientes entre los que busca conexidad")
    @Column(name="ANIOS_ANTIGUEDAD")
	public Integer getAniosAntiguedad() {
		return aniosAntiguedad;
	}

	public void setAniosAntiguedad(Integer aniosAntiguedad) {
		this.aniosAntiguedad = aniosAntiguedad;
	}

	@DataDefinition(label = "Igual Objeto de Juicio")
    @SelectItems(enumeration="trueFalseEnumeration", control=ControlType.Droplist)
    @Column(name="IGUAL_OJ")
	public Boolean getIgualObjetoJuicio() {
		return igualObjetoJuicio;
	}

	public void setIgualObjetoJuicio(Boolean igualObjetoJuicio) {
		this.igualObjetoJuicio = igualObjetoJuicio;
	}

	@DataDefinition(label = "Tiempo de Finalización")
    @Column(name="TIEMPO_FINALIZACION")
	public String getTiempoFinalizacion() {
		return tiempoFinalizacion;
	}

	public void setTiempoFinalizacion(String tiempoFinalizacion) {
		this.tiempoFinalizacion = tiempoFinalizacion;
	}

	@Transient
	public List<String> getCodigosTipoCausaList() {
		if (codigosTipoCausaList == null) {
			if (!Strings.isEmpty(getTiposCausa())){
				codigosTipoCausaList = Configuration.getCommaSeparatedAsList(getTiposCausa());
			}
		}
		return codigosTipoCausaList;
	}

	public void setCodigosTipoCausaList(List<String> codigosTipoCausaList) {
		this.codigosTipoCausaList = codigosTipoCausaList;
	}

	@Transient
	public List<String> getCodigosTemaList() {
		if (codigosTemaList == null) {
			if (!Strings.isEmpty(getTemas())){
				codigosTemaList = Configuration.getCommaSeparatedAsList(getTemas());
			}
		}
		return codigosTemaList;
	}

	public void setCodigosTemaList(List<String> codigosTemaList) {
		this.codigosTemaList = codigosTemaList;
	}


}


