package com.base100.lex100.entity;
// Generated by Expand 4.0.0 

import static javax.persistence.GenerationType.SEQUENCE;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.Lob;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OrderBy;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.commons.lang.StringUtils;

import com.base100.expand.annotation.ControlType;
import com.base100.expand.annotation.DataDefinition;
import com.base100.expand.annotation.EntityDefinition;
import com.base100.expand.annotation.EntityGroup;
import com.base100.expand.annotation.EntityIcon;
import com.base100.expand.annotation.GenerationProperty;
import com.base100.expand.annotation.Hidden;
import com.base100.expand.annotation.InteractiveModuleProperties;
import com.base100.expand.annotation.Lines;
import com.base100.expand.annotation.RestrictedEntity;
import com.base100.expand.annotation.SelectItem;
import com.base100.expand.annotation.SelectItems;
import com.base100.expand.annotation.index.IndexField;
import com.base100.lex100.component.audit.AbstractLogicalDeletion;
import com.base100.lex100.component.enumeration.TipoDocumentoIdentidadEnumeration;
import com.base100.lex100.component.enumeration.TipoIntervinienteEnumeration;
import com.base100.lex100.component.identity.IdentificableEntityListener;

/**
 * Conexidad generated by Expand 4.0.0
 */
@Entity
@EntityDefinition(label = "Conexidad", listLabel = "Conexidades")
@EntityGroup("MesaEntrada")
@EntityIcon
@RestrictedEntity
@InteractiveModuleProperties( {
		@GenerationProperty(propertyName = "gridColumns", propertyValue = "1") })
@Table(name = "CONEXIDAD")
@EntityListeners({IdentificableEntityListener.class})
public class Conexidad extends AbstractLogicalDeletion implements java.io.Serializable, IIdentificable {

     public static final Integer MAX_PRIORIDAD_VALUE = 9999;

     private Integer id;
     private String tipo;
     private Boolean principal;
     private Integer orden;
     private String coincidencias;
     private String uuid;
     private Expediente expedienteOrigen;
     private Expediente expedienteRelacionado;
     private List<CriterioCnx> criterioCnxList = new ArrayList<CriterioCnx>(0);

     //Transient
     private Integer numeroCriterios;
	 private Integer numeroCoincidencias;
	 private Integer prioridad = MAX_PRIORIDAD_VALUE;
	 private Integer countCUIT;
	 private Integer countDNI;
	 private boolean coincidenciaActor;
	 private boolean coincidenciaDemandado;
	 
    public Conexidad() {
    }

    public Conexidad(Expediente expedienteOrigen, Expediente expedienteRelacionado) {
        this.expedienteOrigen = expedienteOrigen;
        this.expedienteRelacionado = expedienteRelacionado;
    }

    public Conexidad(String tipo, Boolean principal, Integer orden, String coincidencias, String uuid, Expediente expedienteOrigen, Expediente expedienteRelacionado, List<CriterioCnx> criterioCnxList) {
       this.tipo = tipo;
       this.principal = principal;
       this.orden = orden;
       this.coincidencias = coincidencias;
       this.uuid = uuid;
       this.expedienteOrigen = expedienteOrigen;
       this.expedienteRelacionado = expedienteRelacionado;
       this.criterioCnxList = criterioCnxList;
    }

    public Conexidad(Conexidad conexidad) {
		this.coincidencias = conexidad.coincidencias;
		this.expedienteRelacionado = conexidad.expedienteRelacionado;
		this.numeroCoincidencias = conexidad.numeroCoincidencias;
		this.numeroCriterios = conexidad.numeroCriterios;
		this.orden = conexidad.orden;
		this.principal = conexidad.principal;
		this.prioridad = conexidad.prioridad;
		this.tipo = conexidad.tipo;
		this.criterioCnxList.addAll(conexidad.getCriterioCnxList());
	}

	@SequenceGenerator(name="generator", sequenceName="S_CONEXIDAD", allocationSize=1)@Id @GeneratedValue(strategy=SEQUENCE, generator="generator")    
	@DataDefinition(label = "Id Conexidad")
    @Column(name="ID_CONEXIDAD", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }
    
	@DataDefinition(label = "Tipo Conexidad", defaultValue = "A")
	@SelectItems(enumeration = "tipoConexidadEnumeration",control=ControlType.Droplist,
		value={
			@SelectItem(value = "A",label = "Automatica"),
			@SelectItem(value = "D",label = "Denunciada")
		})
    @Column(name="TIPO_CONEXIDAD", length=1)
    public String getTipo() {
        return this.tipo;
    }
    
    public void setTipo(String tipo) {
        this.tipo = tipo;
    }
    
	@DataDefinition(label = "Principal")
    @Column(name="PRINCIPAL")
    public Boolean getPrincipal() {
        return this.principal;
    }
    
    public void setPrincipal(Boolean principal) {
        this.principal = principal;
    }
    
	@DataDefinition(label = "Orden", defaultValue = "0")
    @Column(name="ORDEN")
    public Integer getOrden() {
        return this.orden;
    }
    
    public void setOrden(Integer orden) {
        this.orden = orden;
    }

	@DataDefinition(label = "Coincidencias")
	@Lob
    @Column(name="COINCIDENCIAS")
    public String getCoincidencias() {
        return this.coincidencias;
    }
    
    public void setCoincidencias(String coincidencias) {
        this.coincidencias = coincidencias;
    }
    
    @DataDefinition(label = "UUID",displayLength = 10, rendered="false")
	@IndexField
	@Hidden
    @Column(name="UUID", unique=true, length=40)
    public String getUuid() {
        return this.uuid;
    }
    
    public void setUuid(String uuid) {
        this.uuid = uuid;
    }
    
	@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="ID_EXPEDIENTE", nullable=false)
    public Expediente getExpedienteOrigen() {
        return this.expedienteOrigen;
    }
    
    public void setExpedienteOrigen(Expediente expedienteOrigen) {
        this.expedienteOrigen = expedienteOrigen;
    }
    
	@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="ID_EXPEDIENTE_RELACIONADO", nullable=false)
    public Expediente getExpedienteRelacionado() {
        return this.expedienteRelacionado;
    }
    
    public void setExpedienteRelacionado(Expediente expedienteRelacionado) {
        this.expedienteRelacionado = expedienteRelacionado;
    }
    
	@ManyToMany(fetch=FetchType.LAZY)
    @JoinTable(name="CRITERIO_CONEXIDAD", joinColumns = { 
        @JoinColumn(name="ID_CONEXIDAD", updatable=false) }, inverseJoinColumns = { 
        @JoinColumn(name="ID_CRITERIO_CNX", updatable=false) })
    @OrderBy("prioridad")
    public List<CriterioCnx> getCriterioCnxList() {
        return this.criterioCnxList;
    }
    
    public void setCriterioCnxList(List<CriterioCnx> criterioCnxList) {
        this.criterioCnxList = criterioCnxList;
    }

    @Transient
    public String getCriteriosName() {
    	StringBuffer buffer = new StringBuffer();
    	for(CriterioCnx criterio: getCriterioCnxList()) {
    		if (buffer.length() > 0) {
    			buffer.append(", ");
    		}
    		buffer.append(criterio.getNombre());
    	}
    	return buffer.toString();
    }

    @Transient
    public Integer getNumeroCriterios() {
    	if (this.numeroCriterios == null) {
    		this.numeroCriterios = 0;
    	}
		return this.numeroCriterios;
	}
	public void setNumeroCriterios(Integer numeroCriterios) {
		this.numeroCriterios = numeroCriterios;
	}

    @Transient
    public Integer getNumeroCoincidencias() {
    	if (this.numeroCoincidencias == null) {
    		this.numeroCoincidencias = 0;
    	}
		return this.numeroCoincidencias;
	}
	public void setNumeroCoincidencias(Integer numeroCoincidencias) {
		this.numeroCoincidencias = numeroCoincidencias;
	}

    @Transient
    public Integer getPrioridad() {
    	if (this.prioridad == null) {
    		this.prioridad = MAX_PRIORIDAD_VALUE;
    	}
		return this.prioridad;
	}
	public void setPrioridad(Integer prioridad) {
		this.prioridad = prioridad;
	}

    @Transient
	public Integer getCUITOcurrences() {
    	if (this.countCUIT == null) {
    		this.countCUIT = StringUtils.countMatches(coincidencias, TipoDocumentoIdentidadEnumeration.CUIT_CODE);;
    	}
		return this.countCUIT;
	}

    @Transient
	public Integer getDNIOcurrences() {
    	if (this.countDNI == null) {
    		this.countDNI = StringUtils.countMatches(coincidencias, TipoDocumentoIdentidadEnumeration.DNI_CODE);;
    	}
		return this.countDNI;
	}

    @Transient
    public Integer getCUITDNIOcurrences() {
		return getCUITOcurrences() + getDNIOcurrences();
	}

    @Transient
    public boolean isCoincidenciaActor() {
		return this.coincidenciaActor;
	}

    @Transient
    public boolean isCoincidenciaDemandado() {
		return this.coincidenciaDemandado;
	}

    public void addTipoCoincidenciaParte(Integer naturalezaParte) {
		if (TipoIntervinienteEnumeration.ACTOR_NUMERO_ORDEN.equals(naturalezaParte)) {
			this.coincidenciaActor = true;
		} else if (TipoIntervinienteEnumeration.DEMANDADO_NUMERO_ORDEN.equals(naturalezaParte)) {
			this.coincidenciaDemandado = true;
		} 
	}

    
}


