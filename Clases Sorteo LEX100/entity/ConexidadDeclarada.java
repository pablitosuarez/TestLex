package com.base100.lex100.entity;
// Generated by Expand 4.0.0 

import static javax.persistence.GenerationType.SEQUENCE;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.validator.Length;
import org.jboss.seam.util.Strings;

import com.base100.expand.annotation.ControlType;
import com.base100.expand.annotation.DataDefinition;
import com.base100.expand.annotation.EntityDefinition;
import com.base100.expand.annotation.EntityGroup;
import com.base100.expand.annotation.EntityIcon;
import com.base100.expand.annotation.GenerationProperty;
import com.base100.expand.annotation.Hidden;
import com.base100.expand.annotation.InteractiveModuleProperties;
import com.base100.expand.annotation.Lines;
import com.base100.expand.annotation.RestrictedEntity;
import com.base100.expand.annotation.SelectItem;
import com.base100.expand.annotation.SelectItems;
import com.base100.expand.annotation.index.IndexField;
import com.base100.lex100.component.audit.AbstractLogicalDeletion;
import com.base100.lex100.component.enumeration.TipoConexidadSolicitadaEnumeration;
import com.base100.lex100.component.identity.IdentificableEntityListener;
import com.base100.lex100.mesaEntrada.conexidad.ConexidadManager;

/**
 * ConexidadDeclarada generated by Expand 4.0.0
 */
@Entity
@EntityDefinition(label = "Conexidad Declarada", listLabel = "Conexidad Declarada")
@EntityGroup("MesaEntrada")
@EntityIcon
@RestrictedEntity
@Lines(joinProperty="expediente")
@InteractiveModuleProperties( {
		@GenerationProperty(propertyName = "gridColumns", propertyValue = "1") })
@Table(name = "CONEXIDAD_DECLARADA")
@EntityListeners({IdentificableEntityListener.class})
public class ConexidadDeclarada implements java.io.Serializable, IIdentificable {

     private Integer id;
     private String descripcionOficina;	// deprecated
     private Integer numeroExpedienteConexo;
     private Integer anioExpedienteConexo;
     private Integer juzgado;	// deprecated
     private String parametro;
     private Integer secretaria;	// deprecated
     private String uuid;
     private ExpedienteIngreso expedienteIngreso; //deprecated
     private Oficina oficina;

     private Expediente expediente;
     private Expediente expedienteConexo;

     private String observaciones;

     private boolean anteriorAlSistema;
     
     private String tipoAsignacionConexo = (String)TipoConexidadSolicitadaEnumeration.Type.declarada.getValue();
     
     private String abreviaturaCamaraExpedienteConexo;
     
     // Transient
 
    public ConexidadDeclarada() {
    }
	
    public ConexidadDeclarada(ConexidadDeclarada conexidadDeclarada) {
		this.descripcionOficina = conexidadDeclarada.descripcionOficina;
		this.numeroExpedienteConexo = conexidadDeclarada.numeroExpedienteConexo;
		this.anioExpedienteConexo = conexidadDeclarada.anioExpedienteConexo;
		this.oficina = conexidadDeclarada.oficina;
		this.observaciones = conexidadDeclarada.observaciones;
		this.anteriorAlSistema = conexidadDeclarada.anteriorAlSistema;
		this.tipoAsignacionConexo = conexidadDeclarada.tipoAsignacionConexo;
		this.expedienteConexo = conexidadDeclarada.expedienteConexo;
	}

    @SequenceGenerator(name="generator", sequenceName="S_CONEXIDAD_DECLARADA", allocationSize=1)@Id @GeneratedValue(strategy=SEQUENCE, generator="generator")    
	@DataDefinition(label = "Id Conexidad Declarada")
    @Column(name="ID_CONEXIDAD_DECLARADA", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }
    
	@DataDefinition(label = "Descripcion Oficina")
    @Column(name="DESCRIPCION_OFICINA", length=200)
    public String getDescripcionOficina() {
        return this.descripcionOficina;
    }
    
    public void setDescripcionOficina(String descripcionOficina) {
        this.descripcionOficina = descripcionOficina;
    }
    
	@DataDefinition(label = "Numero Expediente Conexo")
    @Column(name="NUMERO_EXPEDIENTE_CONEXO")
    public Integer getNumeroExpedienteConexo() {
        return this.numeroExpedienteConexo;
    }
    
    public void setNumeroExpedienteConexo(Integer numeroExpedienteConexo) {
        this.numeroExpedienteConexo = numeroExpedienteConexo;
    }
    
	@DataDefinition(label = "Anio Expediente Conexo")
    @Column(name="ANIO_EXPEDIENTE_CONEXO")
    public Integer getAnioExpedienteConexo() {
        return this.anioExpedienteConexo;
    }
    
    public void setAnioExpedienteConexo(Integer anioExpedienteConexo) {
        this.anioExpedienteConexo = anioExpedienteConexo;
    }
    
	@DataDefinition(label = "Parametro")
    @Column(name="PARAMETRO", length=200)
    public String getParametro() {
        return this.parametro;
    }
    
    public void setParametro(String parametro) {
        this.parametro = parametro;
    }
    
    @DataDefinition(label = "UUID",displayLength = 10, rendered="false")
	@IndexField
	@Hidden
    @Column(name="UUID", unique=true, length=40)
    public String getUuid() {
        return this.uuid;
    }
    
    public void setUuid(String uuid) {
        this.uuid = uuid;
    }
    
	@OneToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="ID_EXPEDIENTE_INGRESO", nullable=false)
    public ExpedienteIngreso getExpedienteIngreso() {
        return this.expedienteIngreso;
    }
    
    public void setExpedienteIngreso(ExpedienteIngreso expedienteIngreso) {
        this.expedienteIngreso = expedienteIngreso;
    }
    
    // Pendiente: Cambiar para que el join relevante sea ID_EXPEDIENTE en lugar de ID_EXPEDIENTE_INGRESO, modificando la relacion inversa definida en ExpedienteIngreso y creando una nueva en Expediente
	@OneToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="ID_EXPEDIENTE")
	public Expediente getExpediente() {
		if ((expediente == null) && (getExpedienteIngreso() != null)){
			return getExpedienteIngreso().getExpediente();
		}
		return expediente;
	}

	public void setExpediente(Expediente expediente) {
		this.expediente = expediente;
	}
    
	@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="ID_OFICINA")
    public Oficina getOficina() {
        return this.oficina;
    }
    
    public void setOficina(Oficina oficina) {
        this.oficina = oficina;
		calculaDescripcionOficina();
    }

	@DataDefinition(label = "Anterior al Sistema")
    @Column(name="ANTERIOR_AL_SISTEMA", nullable=false)
	public boolean isAnteriorAlSistema() {
		return anteriorAlSistema;
	}

	public void setAnteriorAlSistema(boolean anteriorAlSistema) {
		this.anteriorAlSistema = anteriorAlSistema;
	}

	@DataDefinition(label = "Observaciones")
	@Length(max=256)
    @Column(name="OBSERVACIONES", length=256)
	public String getObservaciones() {
		return observaciones;
	}

	public void setObservaciones(String observaciones) {
		this.observaciones = observaciones;
	}

	
	@DataDefinition(label = "Tipo Asignación")
    @Column(name="TIPO_ASIGNACION_CONEXO")
	public String getTipoAsignacionConexo() {
		return tipoAsignacionConexo;
	}

	public void setTipoAsignacionConexo(String tipoAsignacionConexo) {
		this.tipoAsignacionConexo = tipoAsignacionConexo;
	}

	@Transient
	public boolean isSolicitadaPorMesa() {	// Conexidad por Tema
		return TipoConexidadSolicitadaEnumeration.Type.solicitadaPorMesa.getValue().equals(getTipoAsignacionConexo());
	}

	@Transient
	public boolean isPrevencion() {	
		return TipoConexidadSolicitadaEnumeration.Type.prevencion.getValue().equals(getTipoAsignacionConexo());
	}

	@Transient
	public boolean isDeclarada() {	
		return (getTipoAsignacionConexo() == null) || TipoConexidadSolicitadaEnumeration.Type.declarada.getValue().equals(getTipoAsignacionConexo());
	}

	@Transient
    public Integer getJuzgado() {
		if ((juzgado == null) && (getDescripcionOficina() != null)){
			int pos = getDescripcionOficina().indexOf("/");
			String str;
			if (pos < 0) {
				str = getDescripcionOficina();
			} else {
				str = getDescripcionOficina().substring(0, pos);
			}
			try {
				juzgado = Integer.valueOf(str.trim());
			} catch (NumberFormatException e) {
			}
		}
		return juzgado;
	}

	public void setJuzgado(Integer juzgado) {
		this.juzgado = juzgado;
		calculaDescripcionOficina();
	}

    @Transient
	public Integer getSecretaria() {
		if ((secretaria == null) && (getDescripcionOficina() != null)){
			int pos = getDescripcionOficina().indexOf("/");
			String str;
			if ((pos > 0) && (getDescripcionOficina().length() > (pos+1))){
				str = getDescripcionOficina().substring(pos+1);
				try {
					secretaria = Integer.valueOf(str.trim());
				} catch (NumberFormatException e) {
				}
			}
		}
		return secretaria;
	}

	public void setSecretaria(Integer secretaria) {
		this.secretaria = secretaria;
	}

    private void calculaDescripcionOficina() {
    	StringBuffer descripcion = new StringBuffer();
    	if (getJuzgado() != null) {
    		descripcion.append(getJuzgado().toString());
    	}
    	if (descripcion.length() > 0) {
    		descripcion.append("/");
    	}
    	if (getSecretaria() != null) {
    		descripcion.append(getSecretaria().toString());
    	}
    	setDescripcionOficina(descripcion.toString());
	}

	@Transient
	public boolean isEmpty() {
		return getAnioExpedienteConexo() == null &&
				getNumeroExpedienteConexo() == null &&
				getOficina() == null;
	}

	@OneToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="ID_EXPEDIENTE_CONEXO")
	public Expediente getExpedienteConexo() {
		return expedienteConexo;
	}

	public void setExpedienteConexo(Expediente expedienteConexo) {
		this.expedienteConexo = expedienteConexo;
	}

	public static String getConexidadDeclaradaAsString(ConexidadDeclarada conexidadDeclarada) {
		StringBuffer descripcion = new StringBuffer();
		if (conexidadDeclarada.getExpedienteConexo() != null) {
			descripcion.append(conexidadDeclarada.getExpedienteConexo().getIdxAnaliticoFirst());
		} else if (!conexidadDeclarada.isEmpty()){
			descripcion.append(conexidadDeclarada.getNumeroExpedienteConexo()+"/"+conexidadDeclarada.getAnioExpedienteConexo());
		}
		if (conexidadDeclarada.getOficina() != null) {
			if (descripcion.length() > 0) {
				descripcion.append(",");
			}
			descripcion.append(conexidadDeclarada.getOficina().getDescripcion());
		}
		if(!Strings.isEmpty(conexidadDeclarada.getObservaciones())) {
			if (descripcion.length() > 0) {
				descripcion.append(": ");
			}
			descripcion.append(conexidadDeclarada.getObservaciones());
		}
		return descripcion.toString();
	}

	@Transient
	public String getAbreviaturaCamaraExpedienteConexo() {
		if(Strings.isEmpty(abreviaturaCamaraExpedienteConexo) && this.expedienteConexo != null){
			return this.expedienteConexo.getCamara().getAbreviatura();
		}
		return abreviaturaCamaraExpedienteConexo;
	}

	public void setAbreviaturaCamaraExpedienteConexo(String abreviaturaCamaraExpedienteConexo) {
		this.abreviaturaCamaraExpedienteConexo = abreviaturaCamaraExpedienteConexo;
		if (this.abreviaturaCamaraExpedienteConexo != null) {
			this.abreviaturaCamaraExpedienteConexo = this.abreviaturaCamaraExpedienteConexo.toUpperCase();
		}		
	}

	@Transient
	public String getClaveExpedienteConexo() {
		if(getNumeroExpedienteConexo() == null || getAnioExpedienteConexo() == null){
			return null;
		}
		StringBuffer sb = new StringBuffer();
		if(!Strings.isEmpty(getAbreviaturaCamaraExpedienteConexo())){
			sb.append(getAbreviaturaCamaraExpedienteConexo());
			sb.append(" ");
		}
		sb.append(getNumeroExpedienteConexo());
		sb.append("/");
		sb.append(getAnioExpedienteConexo());
		return sb.toString();
	}
	

}


