package com.base100.lex100.controller.entity.sorteoAud;

import com.base100.expand.json.JSONException;
import com.base100.expand.json.JSONObject;
import com.base100.expand.seam.framework.entity.AbstractEntityHome;
import com.base100.expand.seam.framework.entity.EntityOperationException;
import com.base100.expand.seam.framework.entity.LookupEntitySelectionListener;
import com.base100.lex100.controller.entity.camara.CamaraSearch;
import com.base100.lex100.entity.Camara;
import com.base100.lex100.entity.SorteoAud;
import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.international.StatusMessage;

/**
 * Class for SorteoAud Home objects.
 * 
 * Generated by Expand.
 *
 */
@Name("sorteoAudHome")
public class SorteoAudHome extends AbstractEntityHome<SorteoAud>
{
    @In(create=true)
    private CamaraSearch camaraSearch;
    @In(create=true)
    private SorteoAudSearch sorteoAudSearch;

    /**
     * Set/change the entity being managed by id.
     * 
     * @param id new instance id
     */
    public void setSorteoAudId(Integer id) {
        setId(id);
    }

    /**
     * Returns the current instance id.
     * 
     * @return the current id.
     */
    public Integer getSorteoAudId() {
        return (Integer) getId();
    }

    
    public boolean isWired() {
        return true;
    }

    /**
     * Get the managed entity, or null if the id is not defined.
     * 
     * @return the managed entity, if any.
     */
    public SorteoAud getDefinedInstance() {
        return isIdDefined() ? getInstance() : null;
    }
 	

    @Override
	public String serializeId(SorteoAud sorteoAud) {
		JSONObject jsonObject = new JSONObject();
		try {
			jsonObject.put("Id", sorteoAud.getId());
		} catch (JSONException e) {
		}
		return jsonObject.toString(); 
	}

// Lookups


	/**
	 * Action method called from the lookup button/link to select the camara property.   
	 * 
	 * @param toPage		the page to go
	 * @param returnPage	the page to return after selection was done. 
	 */
	public String lookupCamara(String toPage, String returnPage) {
		lookupCamara(returnPage); 
		return toPage;
	}

	/**
	 * Action method called from the lookup button/link to select the camara property.   
	 * 
	 * @param returnPage	the page to return after selection was done. 
	 */
	public void lookupCamara(String returnPage) {
		initializeLookup(camaraSearch, new LookupEntitySelectionListener<Camara>(returnPage, Camara.class) {
			public void updateLookup(Camara entity) {
				getInstance().setCamara(entity);
			}
		});
	}

	/**
	 * Action method called from the clear lookup button/link to clear the camara property.   
	 */
	public void clearLookupCamara() {
		getInstance().setCamara(null);
	}


	/**
	 * Action method called from the lookup button/link to select the search camara property.   
	 * 
	 * @param toPage		the page to go
	 * @param returnPage	the page to return after selection was done. 
	 */
	public String lookupSearchCamara(String toPage, String returnPage) {
		lookupSearchCamara(returnPage); 
		return toPage;
	}

	/**
	 * Action method called from the lookup button/link to select the search camara property.   
	 * 
	 * @param returnPage	the page to return after selection was done. 
	 */
	public void lookupSearchCamara(String returnPage) {
		initializeLookup(camaraSearch, new LookupEntitySelectionListener<Camara>(returnPage, Camara.class) {
			public void updateLookup(Camara entity) {
				sorteoAudSearch.setCamara(entity);
			}
		});
	}

// Validation

// Operation event callbacks

	@Override
	public void afterSelect(){
	}

	@Override
	public void afterNew(SorteoAud sorteoAud) {
        Camara camara=(Camara)evaluateElExpression("#{sessionState.globalCamara}");
        if ( camara!=null )
        {
			sorteoAud.setCamara(camara);
        }
        sorteoAud.setRangoMinimos(1);
        
        // settings of default values for properties can be inserted here

	}

	private boolean checkRequired() {
		boolean error = false;
		if (getInstance().getTipoInstancia() == null) {
			error = true;
			addStatusMessage(StatusMessage.Severity.ERROR, "#{messages['sorteoAud.tipoInstancia']} :" + org.jboss.seam.international.Messages.instance().get("error_notnull"));
		}
		if (getInstance().getTipoOficina() == null) {
			error = true;
			addStatusMessage(StatusMessage.Severity.ERROR, "#{messages['sorteoAud.tipoOficina']} :" + org.jboss.seam.international.Messages.instance().get("error_notnull"));
		}
		return error;
	}

	@Override
	public void beforeAdd(SorteoAud sorteoAud) throws EntityOperationException {
		boolean error = false;
		if (sorteoAudSearch.findByUuid(sorteoAud.getUuid()) != null){
			error = true;
			addStatusMessage(StatusMessage.Severity.ERROR, org.jboss.seam.international.Messages.instance().get("error_duplicated_id") + " ("  + "UUID" + ")");
		}

		error |= checkRequired();
		if (error) {
			throw new EntityOperationException();
		}
	}
	
	@Override
	public void beforeUpdate(SorteoAud sorteoAud) throws EntityOperationException {
		boolean error = false;
		error |= checkRequired();
		if (error) {
			throw new EntityOperationException();
		}
	}
	
	@Override
	public void beforeDelete(SorteoAud sorteoAud) throws EntityOperationException {
		Long count;
		 count = (Long) getEntityManager()
			.createQuery("select count(*) from OficinaSorteo where sorteoAud = :sorteoAud") 
			.setParameter("sorteoAud", sorteoAud)
			.getSingleResult();
		if (count != null && count > 0) {
			throw new EntityOperationException(org.jboss.seam.international.Messages.instance().get("sorteoAud.oficinaSorteoList.list_exist"));
		}
	}

	@Override
	public void afterUpdate(SorteoAud sorteoAud) throws EntityOperationException {
	}
	
	@Override
	public void afterAdd(SorteoAud sorteoAud) throws EntityOperationException {
	}

	@Override
	public void afterDelete(SorteoAud sorteoAud) throws EntityOperationException {
	}



}

