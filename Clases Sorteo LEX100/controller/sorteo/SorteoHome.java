package com.base100.lex100.controller.entity.sorteo;

import java.awt.datatransfer.StringSelection;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

import javax.persistence.Query;

import org.jboss.seam.Component;
import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.Transactional;
import org.jboss.seam.international.StatusMessage;
import org.jboss.seam.util.Strings;

import com.base100.expand.json.JSONException;
import com.base100.expand.json.JSONObject;
import com.base100.expand.seam.framework.entity.AbstractEntityHome;
import com.base100.expand.seam.framework.entity.EntityOperationException;
import com.base100.expand.seam.framework.entity.ILogicalDeletion;
import com.base100.expand.seam.framework.entity.LookupEntitySelectionListener;
import com.base100.lex100.component.configuration.SessionState;
import com.base100.lex100.component.enumeration.CompetenciaEnumeration;
import com.base100.lex100.component.enumeration.TipoBolilleroEnumeration;
import com.base100.lex100.controller.entity.camara.CamaraSearch;
import com.base100.lex100.controller.entity.oficina.OficinaSearch;
import com.base100.lex100.controller.entity.oficinaSorteo.OficinaSorteoList;
import com.base100.lex100.controller.entity.oficinaSorteo.OficinaSorteoSearch;
import com.base100.lex100.controller.entity.tipoBolillero.TipoBolilleroSearch;
import com.base100.lex100.entity.Camara;
import com.base100.lex100.entity.Competencia;
import com.base100.lex100.entity.Materia;
import com.base100.lex100.entity.Oficina;
import com.base100.lex100.entity.OficinaCargaExp;
import com.base100.lex100.entity.OficinaSorteo;
import com.base100.lex100.entity.Sorteo;
import com.base100.lex100.entity.TipoBolillero;
import com.base100.lex100.mesaEntrada.sorteo.MesaSorteo;
import com.base100.lex100.mesaEntrada.sorteo.util.CargadorBolillero;
import com.base100.lex100.mesaEntrada.sorteo.util.StatusBolillero;

/**
 * Class for Sorteo Home objects.
 * 
 * Generated by Expand.
 *
 */
@Name("sorteoHome")
public class SorteoHome extends AbstractEntityHome<Sorteo>
{
    @In(create=true)
    private CamaraSearch camaraSearch;
    @In(create=true)
    private SorteoSearch sorteoSearch;
    @In(create=true)
    private OficinaSearch oficinaSearch;
    @In(create=true)
    private TipoBolilleroSearch tipoBolilleroSearch;
    @In(create=true)
    private OficinaSorteoSearch oficinaSorteoSearch;
    @In(create=true)
    private CargadorBolillero cargadorBolillero;

 
    private boolean sorteoHasErrors;
    
	public static SorteoHome instance(){
		return (SorteoHome) Component.getInstance(SorteoHome.class, true);
	}

	/**
     * Set/change the entity being managed by id.
     * 
     * @param id new instance id
     */
    public void setSorteoId(Integer id) {
        setId(id);
    }

    /**
     * Returns the current instance id.
     * 
     * @return the current id.
     */
    public Integer getSorteoId() {
        return (Integer) getId();
    }

    
    public boolean isWired() {
        return true;
    }

    /**
     * Get the managed entity, or null if the id is not defined.
     * 
     * @return the managed entity, if any.
     */
    public Sorteo getDefinedInstance() {
        return isIdDefined() ? getInstance() : null;
    }
 	

    @Override
	public String serializeId(Sorteo sorteo) {
		JSONObject jsonObject = new JSONObject();
		try {
			jsonObject.put("Id", sorteo.getId());
		} catch (JSONException e) {
		}
		return jsonObject.toString(); 
	}

// Lookups

	public void lookupAddToTipoBolilleroList(String returnPage) {
		initializeLookup(tipoBolilleroSearch, new LookupEntitySelectionListener<TipoBolillero>(returnPage, TipoBolillero.class) {
			public void updateLookup(TipoBolillero entity) {
				if(!getInstance().getTipoBolilleroList().contains(entity)){
					getInstance().getTipoBolilleroList().add(entity);
				}else{
					addStatusMessage(StatusMessage.Severity.ERROR, org.jboss.seam.international.Messages.instance().get("error_exist"));
				}				
			}
		});
	}
	
	public void lookupAddToTipoBolilleroListMultiple(String returnPage) {
		initializeLookup(tipoBolilleroSearch, new LookupEntitySelectionListener<TipoBolillero>(returnPage, TipoBolillero.class, true) {
			public void updateLookup(TipoBolillero entity) {
				if(!getInstance().getTipoBolilleroList().contains(entity)){
					getInstance().getTipoBolilleroList().add(entity);
				}else{
					// TODO: uncomment this to check duplicates.
					//	addStatusMessage(StatusMessage.Severity.ERROR, org.jboss.seam.international.Messages.instance().get("error_exist"));
					//
				}				
			}
			
			public void finishSelection() {
				super.finishSelection();
			}
		});
	}

	public void removeFromTipoBolilleroList(TipoBolillero entity){
		getInstance().getTipoBolilleroList().remove(entity);
	}

	/**
	 * Action method called from the lookup button/link to select the camara property.   
	 * 
	 * @param toPage		the page to go
	 * @param returnPage	the page to return after selection was done. 
	 */
	public String lookupCamara(String toPage, String returnPage) {
		lookupCamara(returnPage); 
		return toPage;
	}

	/**
	 * Action method called from the lookup button/link to select the camara property.   
	 * 
	 * @param returnPage	the page to return after selection was done. 
	 */
	public void lookupCamara(String returnPage) {
		initializeLookup(camaraSearch, new LookupEntitySelectionListener<Camara>(returnPage, Camara.class) {
			public void updateLookup(Camara entity) {
				getInstance().setCamara(entity);
			}
		});
	}

	/**
	 * Action method called from the clear lookup button/link to clear the camara property.   
	 */
	public void clearLookupCamara() {
		getInstance().setCamara(null);
	}


	/**
	 * Action method called from the lookup button/link to select the search camara property.   
	 * 
	 * @param toPage		the page to go
	 * @param returnPage	the page to return after selection was done. 
	 */
	public String lookupSearchCamara(String toPage, String returnPage) {
		lookupSearchCamara(returnPage); 
		return toPage;
	}

	/**
	 * Action method called from the lookup button/link to select the search camara property.   
	 * 
	 * @param returnPage	the page to return after selection was done. 
	 */
	public void lookupSearchCamara(String returnPage) {
		initializeLookup(camaraSearch, new LookupEntitySelectionListener<Camara>(returnPage, Camara.class) {
			public void updateLookup(Camara entity) {
				sorteoSearch.setCamara(entity);
			}
		});
	}
	
	
	public void lookupAddOficinas(String returnPage) {
		oficinaSearch.clear();
		oficinaSearch.setCompetencia(getInstance().getCompetencia());
		oficinaSearch.setTipoInstancia(getInstance().getTipoInstancia());
		oficinaSearch.setTipoOficina(getInstance().getTipoOficina());
		oficinaSearch.updateFilters();
		initializeLookup(oficinaSearch, new LookupEntitySelectionListener<Oficina>(returnPage, Oficina.class, true) {
			public void updateLookup(Oficina entity) {
				if(OficinaSorteoSearch.findByOficina(getEntityManager(),entity) == null){
					OficinaSorteo oficinaSorteo = new OficinaSorteo(false, entity, getInstance(), 0);
					getEntityManager().persist(oficinaSorteo);
					getEntityManager().flush();
				}else{
					// TODO: uncomment this to check duplicates.
					//	addStatusMessage(StatusMessage.Severity.ERROR, org.jboss.seam.international.Messages.instance().get("error_exist"));
					//
				}				
			}
		});
	}
	

    public List<Materia> getMateriasCamara() {
		Camara camara = SessionState.instance().getGlobalCamara();
		if(camara != null){
			return camara.getMateriaList();
		}
		return null;
    }
    
	public List<Competencia> getCompetencias() {
		return CompetenciaEnumeration.instance().getAllResults();
	}


// Validation

// Operation event callbacks

	@Override
	public void afterSelect(){
	}

	@Override
	public void afterNew(Sorteo sorteo) {
		sorteo.setRangoMinimos(0);
		sorteo.setBolasPorOficina(1);
		sorteo.setMinimoNumeroBolas(1);
        Camara camara=(Camara)evaluateElExpression("#{sessionState.globalCamara}");
        if ( camara!=null )
        {
			sorteo.setCamara(camara);
        }
        TipoBolillero tipoBolillero = TipoBolilleroSearch.findByCodigo(getEntityManager(), TipoBolilleroEnumeration.ASIGNACION);
        if (tipoBolillero != null) {
        	sorteo.getTipoBolilleroList().add(tipoBolillero);
        }
        
	}

	private boolean checkRequired(Sorteo sorteo) {
		boolean error = false;
		if (sorteo.getCodigo() == null) {
			error = true;
			addStatusMessage(StatusMessage.Severity.ERROR, "#{messages['sorteo.codigo']} :" + org.jboss.seam.international.Messages.instance().get("error_notnull"));
		}
		if (sorteo.getTipoInstancia() == null) {
			error = true;
			addStatusMessage(StatusMessage.Severity.ERROR, "#{messages['sorteo.tipoInstancia']} :" + org.jboss.seam.international.Messages.instance().get("error_notnull"));
		}
		if (sorteo.getTipoOficina() == null) {
			error = true;
			addStatusMessage(StatusMessage.Severity.ERROR, "#{messages['sorteo.tipoOficina']} :" + org.jboss.seam.international.Messages.instance().get("error_notnull"));
		}
		if (sorteo.getTipoBolilleroList().size() == 0) {
			error = true;
			addStatusMessage(StatusMessage.Severity.ERROR, "#{messages['sorteo.tipoBolillero']} :" + org.jboss.seam.international.Messages.instance().get("error_notnull"));
		}
		return error;
	}

	@Override
	public void beforeAdd(Sorteo sorteo) throws EntityOperationException {
		boolean error = false;
		if ( sorteoSearch.findByCodigo(sorteo.getCodigo()) != null){
			error = true;
			addStatusMessage(StatusMessage.Severity.ERROR, org.jboss.seam.international.Messages.instance().get("error_duplicated_id") + " ("  + "Código" + ")");
		}

		if (sorteoSearch.findByUuid(sorteo.getUuid()) != null){
			error = true;
			addStatusMessage(StatusMessage.Severity.ERROR, org.jboss.seam.international.Messages.instance().get("error_duplicated_id") + " ("  + "UUID" + ")");
		}

		error |= checkRequired(sorteo);
		if (error) {
			throw new EntityOperationException();
		}
	}
	
	@Override
	public void beforeUpdate(Sorteo sorteo) throws EntityOperationException {
		boolean error = false;
		error |= checkRequired(sorteo);
		if (error) {
			throw new EntityOperationException();
		}
	}
	
	@Override
	public void beforeDelete(Sorteo sorteo) throws EntityOperationException {
//		Long count;
//		 count = (Long) getEntityManager()
//			.createQuery("select count(*) from OficinaSorteo where sorteo = :sorteo and status = 0") 
//			.setParameter("sorteo", sorteo)
//			.getSingleResult();
//		if (count != null && count > 0) {
//			throw new EntityOperationException(org.jboss.seam.international.Messages.instance().get("sorteo.oficinaSorteoList.list_exist"));
//		}
		
		if(sorteo instanceof ILogicalDeletion){
			deleteLogicoEnCascada(sorteo);
		}
	}

	@SuppressWarnings("unchecked")
	private void deleteLogicoEnCascada(Sorteo sorteo) {
		deleteLogicoList(sorteo.getOficinaSorteoList());
		deleteLogicoList(sorteo.getTurnoOficinaList());
		List<OficinaCargaExp> list = getEntityManager().createQuery("from OficinaCargaExp oficinaCargaExp where sorteo = :sorteo").setParameter("sorteo", sorteo).getResultList();
		deleteLogicoList(list);
	}

	private void deleteLogicoList(List list) {
		for(Object o: list){
			if(o instanceof ILogicalDeletion){
				((ILogicalDeletion)o).setLogicalDeleted(true);
			}
		}
	}


	@Override
	public void afterUpdate(Sorteo sorteo) throws EntityOperationException {
		MesaSorteo.instance().actualizarTurnoAutomatico(sorteo, null, false);
	}
	
	@Override
	public void afterAdd(Sorteo sorteo) throws EntityOperationException {
		MesaSorteo.instance().actualizarTurnoAutomatico(sorteo, null, false);
	}

	@Override
	public void afterDelete(Sorteo sorteo) throws EntityOperationException {
	}

	public void doClearOficinaList(){
		OficinaSorteoList oficinaSorteoList = OficinaSorteoList.instance();
		for(OficinaSorteo oficinaSorteo: getInstance().getOficinaSorteoList()){
			oficinaSorteoList.doLineDelete(oficinaSorteo);
		}
	}

	public void editarTurnos(String returnPage) {
		oficinaSorteoSearch.addReturnPage(returnPage);
		oficinaSorteoSearch.getSelectionMap().clear();
	}

//	@Transactional
//	public void doBlanqueoBolillero(){
//		createBolillero(getInstance(), true);
//		addStatusMessage(StatusMessage.Severity.INFO, "#{messages['sorteo.bolilleroBlanqueado']}");
//	}
	
	@Transactional
	public void doCargaSorteoEnBolillero(boolean blanqueoDeBolillero){
		Sorteo sorteo = getInstance();
		for(TipoBolillero tipoBolillero: sorteo.getTipoBolilleroList()) {
			createBolillero(sorteo, tipoBolillero, blanqueoDeBolillero);
			if(blanqueoDeBolillero){
				addStatusMessage(StatusMessage.Severity.INFO, "#{messages['sorteo.bolilleroBlanqueado']}", tipoBolillero);
			}else{
				addStatusMessage(StatusMessage.Severity.INFO, "#{messages['sorteo.bolilleroCargado']}", tipoBolillero);
			}
		}
	}

	@Transactional
	public void doBorrarBolillero(){
		Sorteo sorteo = getInstance();
		for(TipoBolillero tipoBolillero: sorteo.getTipoBolilleroList()) {
			borrarBolillero(sorteo, tipoBolillero);
			addStatusMessage(StatusMessage.Severity.INFO, "#{messages['sorteo.bolilleroBorrado']}", tipoBolillero);
		}
	}
	
	public void doVerificarBolillero(){
		verificarBolillero(getInstance());
	}
	
	@Transactional
	public void doRepararBolillero(){
		repararBolillero(getInstance());
	}

	public void meteOficinaEnTurno(Sorteo sorteo, List<OficinaSorteo> oficinasNuevasEnElTurno,	List<OficinaSorteo> oficinasQueMantienenElTurno) {
		List<Integer> oficinasNuevas = getIds(oficinasNuevasEnElTurno);
		List<Integer> oficinasViejas = getIds(oficinasQueMantienenElTurno);

		for(TipoBolillero tipoBolillero: sorteo.getTipoBolilleroList()) {
			List<OficinaCargaExp> bolas = cargadorBolillero.findOficinaCargaExpBySorteo(sorteo, tipoBolillero);
			for(OficinaCargaExp bola: bolas){
				if(oficinasNuevas.contains(bola.getOficina().getId())){
					int minimo = getMinValue(bolas, oficinasViejas, bola.getRubro());
					// pone la bola al menor valor de las que habia pero solo si tenia menos
					if(bola.getCargaTrabajo() < minimo){  
						bola.setCargaTrabajo(minimo);
					}
					bola.setTurno(true);
				}
			}
		}
	}

	private int getMinValue(List<OficinaCargaExp> bolas,	List<Integer> oficinasViejas, String rubro) {
		int minimo = -1;
		for(OficinaCargaExp bola: bolas){
			if(equals(rubro, bola.getRubro()) && oficinasViejas.contains(bola.getOficina().getId())){
				if(minimo < 0 || minimo > bola.getCargaTrabajo()){
					minimo = bola.getCargaTrabajo();
				}
			}
		}
		return minimo < 0 ? 0 : minimo;
		
	}

	private boolean equals(String s1, String s2) {
		return s1 == null ? s2 == null : s1.equals(s2);
	}

	private List<Integer> getIds(List<OficinaSorteo> list) {
		List<Integer> ids = new ArrayList<Integer>();
		for(OficinaSorteo oficinaSorteo: list){
			ids.add(oficinaSorteo.getOficina().getId());
		}
		return ids;
	}

//	@Transactional
//	public String doChangeTurnos(){
//		createBolillero(getInstance(), false);
//		setCheckFlagToOficinasDeTurno();
//		return oficinaSorteoSearch.getReturnPage();
//	}
//
//	private void setCheckFlagToOficinasDeTurno() {
//		for(OficinaSorteo oficinaSorteo: getInstance().getOficinaSorteoList()){
//			boolean checked = Boolean.TRUE.equals(oficinaSorteoSearch.getSelectionMap().get(oficinaSorteo));
//			oficinaSorteo.setTurno(checked);
//		}
//	}

	private void createBolillero(Sorteo sorteo, TipoBolillero tipoBolillero, boolean doBlanqueo) {		
		Materia materia = sorteo.getMateria();	
		List<Oficina> oficinas = getOficinasSorteo();
		List<String> rubros = getRubrosAsList(sorteo);
		int bolasPorOficina = sorteo.getBolasPorOficina() != null ? sorteo.getBolasPorOficina() : 1; 
		cargadorBolillero.cargaBolillero(sorteo, tipoBolillero, oficinas, rubros, bolasPorOficina, materia, doBlanqueo);
	}

	public List<Oficina> getOficinasSorteo() {
		List<Oficina> oficinas = new ArrayList<Oficina>();
		List<OficinaSorteo> oficinaSorteoList = OficinaSorteoList.instance().getbySorteoAllResultList();
		for(OficinaSorteo oficinaSorteo: oficinaSorteoList ){
			if(oficinaSorteo.getStatus() != -1){
				oficinas.add(oficinaSorteo.getOficina()); // 
			}
		}
		return oficinas;
	}

//	private Materia getMateria(Sorteo sorteo) {
//		Materia materia = sorteo.getMateria();
//		if(materia == null){
//			List<Materia> materias = sorteo.getCamara().getMateriaList();
//			materia = materias.size() > 0 ? materias.get(0) : null;	// ???? No vale para camara multimateria
//		}
//		return materia;		
//	}
	
	private void borrarBolillero(Sorteo sorteo, TipoBolillero tipoBolillero) {
		cargadorBolillero.borraBolillero(sorteo, tipoBolillero);
//		Materia materia = getMateria(sorteo);
//		List<Oficina> oficinas = getOficinasSorteo();
//		List<String> rubros = getRubrosAsList(sorteo);
//		cargadorBolillero.borraBolillero(oficinas, rubros, materia);
	}
	
	private void verificarBolillero(Sorteo sorteo) {		
		Materia materia = sorteo.getMateria();	
		List<Oficina> oficinas = getOficinasSorteo();
		List<String> rubros = getRubrosAsList(sorteo);
		int bolasPorOficina = sorteo.getBolasPorOficina() != null ? sorteo.getBolasPorOficina() : 1; 

		sorteoHasErrors = false;
		for(TipoBolillero tipoBolillero: sorteo.getTipoBolilleroList()) {
			List<StatusBolillero> ret = cargadorBolillero.verificaBolillero(sorteo, tipoBolillero, oficinas, rubros, bolasPorOficina, materia, true);
			 
			boolean hasErrors = false;
			for(StatusBolillero item:ret){
				boolean error = item.getStatus() != StatusBolillero.STATUS_OK;		
				getStatusMessages().addFromResourceBundle(error ? StatusMessage.Severity.ERROR : StatusMessage.Severity.INFO, "sorteo.verificarBolillero.status."+item.getStatus(), item.getTipoBolillero().getCodigo(), item.getRubro());
				if(error){
					hasErrors = true;
				}
			}
			sorteoHasErrors |= hasErrors;
			if(!hasErrors){
				addStatusMessageFromResourceBundle(StatusMessage.Severity.INFO, "sorteo.verificarBolillero.ok", tipoBolillero.getCodigo());
			}
		}
	}
	
	private void repararBolillero(Sorteo sorteo) {		
		Materia materia = sorteo.getMateria();	
		List<Oficina> oficinas = getOficinasSorteo();
		List<String> rubros = getRubrosAsList(sorteo);
		int bolasPorOficina = sorteo.getBolasPorOficina() != null ? sorteo.getBolasPorOficina() : 1; 
		
		for(TipoBolillero tipoBolillero: sorteo.getTipoBolilleroList()) {
			Boolean ret = cargadorBolillero.repararBolillero(sorteo, tipoBolillero, oficinas, rubros, bolasPorOficina, materia);
			 
			if(ret){
				addStatusMessageFromResourceBundle(StatusMessage.Severity.INFO, "sorteo.bolilleroSincronizado", tipoBolillero.getCodigo());
			}
		}
		sorteoHasErrors = false;
	}

	
	private String getStatusLabel(int status) {
		String ret = "UNKNOWN";
		switch(status){
			case StatusBolillero.STATUS_OK:
				ret = "OK";
				break;
			case StatusBolillero.STATUS_BOLAS_FALTANTES:
				ret = "Bolas Faltantes";
				break;
			case StatusBolillero.STATUS_BOLAS_SOBRANTES:
				ret = "Bolas Sobrantes";
				break;
			case StatusBolillero.STATUS_RUBRO_NOCREADO:
				ret = "Rubro No Creado";
				break;
			case StatusBolillero.STATUS_RUBRO_SOBRANTE:
				ret = "Rubro Sobrante";
				break;
		}
		return ret;
	}

	private List<String> getRubrosAsList(Sorteo sorteo) {
		List<String> rubros = null;
		if (!Strings.isEmpty(sorteo.getRubros())) {
			rubros = getRubrosAsList(sorteo.getRubros());
			
		}
		if(rubros == null){
			 rubros = new ArrayList<String>();
		}
		return rubros;
	}

	public static List<String> getRubrosAsList(String rubros){
		List<String> ret = null;
		if(!Strings.isEmpty(rubros)){
			ret = new ArrayList<String>();
			ret = chekFormatoProductoCartesiano(rubros);
			if(ret == null){
				ret = tokenizeRubrosIntoList(rubros);
			}
		}
		return ret;
	}

	private static List<String> chekFormatoProductoCartesiano(String rubros) {
		String rubros1 = null;
		String rubros2 = null;
		List<String> ret = null;
		
		rubros = rubros.trim();
		if(rubros.startsWith("[")){
			int idx = rubros.indexOf("]");
			if(idx > 0){
				rubros1 = rubros.substring(1, idx);
				rubros = rubros.substring(idx+1).trim();
			}
			if(rubros.startsWith("[")){
				idx = rubros.indexOf("]");
				if(idx > 0){
					rubros2 = rubros.substring(1, idx);
				}
			}
		}
		if(rubros1 != null && rubros2 != null){
			List<String> rubros1List = tokenizeRubrosIntoList(rubros1);
			List<String> rubros2List = tokenizeRubrosIntoList(rubros2);
			ret = new ArrayList<String>();
			for(String r1: rubros1List){
				for(String r2: rubros2List){
					ret.add(r1+"#"+r2);
				}
			}
		}
		return ret;
	}
	
	private static List<String> tokenizeRubrosIntoList(String rubros) {
		List<String> ret = new ArrayList<String>();
		StringTokenizer st = new StringTokenizer(rubros, ",");
		while(st.hasMoreTokens()){
			String rubro = st.nextToken().trim();
			ret.add(rubro);
		}
		return ret;
	}

	public boolean isSorteoHasErrors() {
		return sorteoHasErrors;
	}

	public void setSorteoHasErrors(boolean sorteoHasErrors) {
		this.sorteoHasErrors = sorteoHasErrors;
	}
}

