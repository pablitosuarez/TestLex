package com.base100.lex100.controller.entity.tipoCambioAsignacion;

import com.base100.expand.json.JSONException;
import com.base100.expand.json.JSONObject;
import com.base100.expand.seam.framework.entity.AbstractEntityHome;
import com.base100.expand.seam.framework.entity.EntityOperationException;
import com.base100.expand.seam.framework.entity.LookupEntitySelectionListener;
import com.base100.lex100.controller.entity.materia.MateriaSearch;
import com.base100.lex100.entity.Materia;
import com.base100.lex100.entity.TipoCambioAsignacion;
import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Name;

/**
 * Class for TipoCambioAsignacion Home objects.
 * 
 * Generated by Expand.
 *
 */
@Name("tipoCambioAsignacionHome")
public class TipoCambioAsignacionHome extends AbstractEntityHome<TipoCambioAsignacion>
{
    @In(create=true)
    private MateriaSearch materiaSearch;
    @In(create=true)
    private TipoCambioAsignacionSearch tipoCambioAsignacionSearch;

    /**
     * Set/change the entity being managed by id.
     * 
     * @param id new instance id
     */
    public void setTipoCambioAsignacionId(Integer id) {
        setId(id);
    }

    /**
     * Returns the current instance id.
     * 
     * @return the current id.
     */
    public Integer getTipoCambioAsignacionId() {
        return (Integer) getId();
    }

    
    public boolean isWired() {
        return true;
    }

    /**
     * Get the managed entity, or null if the id is not defined.
     * 
     * @return the managed entity, if any.
     */
    public TipoCambioAsignacion getDefinedInstance() {
        return isIdDefined() ? getInstance() : null;
    }
 	

    @Override
	public String serializeId(TipoCambioAsignacion tipoCambioAsignacion) {
		JSONObject jsonObject = new JSONObject();
		try {
			jsonObject.put("Id", tipoCambioAsignacion.getId());
		} catch (JSONException e) {
		}
		return jsonObject.toString(); 
	}

// Lookups


	/**
	 * Action method called from the lookup button/link to select the materia property.   
	 * 
	 * @param toPage		the page to go
	 * @param returnPage	the page to return after selection was done. 
	 */
	public String lookupMateria(String toPage, String returnPage) {
		lookupMateria(returnPage); 
		return toPage;
	}

	/**
	 * Action method called from the lookup button/link to select the materia property.   
	 * 
	 * @param returnPage	the page to return after selection was done. 
	 */
	public void lookupMateria(String returnPage) {
		initializeLookup(materiaSearch, new LookupEntitySelectionListener<Materia>(returnPage, Materia.class) {
			public void updateLookup(Materia entity) {
				getInstance().setMateria(entity);
			}
		});
	}

	/**
	 * Action method called from the clear lookup button/link to clear the materia property.   
	 */
	public void clearLookupMateria() {
		getInstance().setMateria(null);
	}


	/**
	 * Action method called from the lookup button/link to select the search materia property.   
	 * 
	 * @param toPage		the page to go
	 * @param returnPage	the page to return after selection was done. 
	 */
	public String lookupSearchMateria(String toPage, String returnPage) {
		lookupSearchMateria(returnPage); 
		return toPage;
	}

	/**
	 * Action method called from the lookup button/link to select the search materia property.   
	 * 
	 * @param returnPage	the page to return after selection was done. 
	 */
	public void lookupSearchMateria(String returnPage) {
		initializeLookup(materiaSearch, new LookupEntitySelectionListener<Materia>(returnPage, Materia.class) {
			public void updateLookup(Materia entity) {
				tipoCambioAsignacionSearch.setMateria(entity);
			}
		});
	}

// Validation

// Operation event callbacks

	@Override
	public void afterSelect(){
	}

	@Override
	public void afterNew(TipoCambioAsignacion tipoCambioAsignacion) {
        
        // settings of default values for properties can be inserted here

	}

	private boolean checkRequired() {
		boolean error = false;
		return error;
	}

	@Override
	public void beforeAdd(TipoCambioAsignacion tipoCambioAsignacion) throws EntityOperationException {
		boolean error = false;

		error |= checkRequired();
		if (error) {
			throw new EntityOperationException();
		}
	}
	
	@Override
	public void beforeUpdate(TipoCambioAsignacion tipoCambioAsignacion) throws EntityOperationException {
		boolean error = false;
		error |= checkRequired();
		if (error) {
			throw new EntityOperationException();
		}
	}
	
	@Override
	public void beforeDelete(TipoCambioAsignacion tipoCambioAsignacion) throws EntityOperationException {
	}

	@Override
	public void afterUpdate(TipoCambioAsignacion tipoCambioAsignacion) throws EntityOperationException {
	}
	
	@Override
	public void afterAdd(TipoCambioAsignacion tipoCambioAsignacion) throws EntityOperationException {
	}

	@Override
	public void afterDelete(TipoCambioAsignacion tipoCambioAsignacion) throws EntityOperationException {
	}



}

