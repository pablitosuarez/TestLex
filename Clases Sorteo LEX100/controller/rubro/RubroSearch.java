package com.base100.lex100.controller.entity.rubro;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.Query;

import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.intercept.BypassInterceptors;

import com.base100.expand.seam.framework.entity.AbstractEntitySearch;
import com.base100.lex100.entity.Camara;
import com.base100.lex100.entity.Materia;
import com.base100.lex100.entity.Rubro;
import com.base100.lex100.entity.TipoInstancia;



/**
 * Class for Rubro search filters.
 * 
 * Generated by Expand.
 *
 */
@Name("rubroSearch")
@BypassInterceptors
public class RubroSearch extends AbstractEntitySearch<Rubro>
{

	static public final String BY_CODIGO_STMT = 
		"FROM Rubro rubro WHERE " +
	    "rubro.codigo = :codigo and rubro.materia = :materia and rubro.tipoInstancia = :tipoInstancia and status <> -1";

	static public final String BY_CODIGO_CAMARA_STMT = 
		"FROM Rubro rubro WHERE " +
	    "rubro.codigo = :codigo and rubro.materia = :materia and rubro.camara = :camara and rubro.tipoInstancia = :tipoInstancia and status <> -1";

	static public final String BY_UUID_STMT = 
		"FROM Rubro rubro WHERE " +
	    "rubro.uuid = :uuid and status <> -1";

	private String codigo;
	private String descripcion;
	private Materia materia;
	private TipoInstancia tipoInstancia;

	private RubroSearch filter;

	public RubroSearch() {
		setDefaultOrder("rubro.materia.codigo, rubro.tipoInstancia.codigo, rubro.codigo");
	}

	@Override
	public void clear() {
		this.codigo = null;
		this.descripcion = null;
		this.materia = null;
		this.tipoInstancia = null;
	}

	@Override
	public String getInitialPanelState()  {
		if (true
			&& this.codigo == null
			&& this.descripcion == null
			&& this.materia == null
			&& this.tipoInstancia == null

	    ){
			return getPanelState();
		} else {
			return "open";
		}
	}

	@Override
	public boolean hasActiveSearch() {
		// TODO Auto-generated method stub
		return false;
	}


    public Rubro findByCodigo(String codigo, Materia materia, TipoInstancia tipoInstancia) {
    	return findByCodigo (getEntityManager(), codigo, materia, tipoInstancia); 
	}

    static private Rubro findByCodigo(EntityManager entityManager, String codigo, Materia materia, TipoInstancia tipoInstancia) {
		Query query = entityManager.createQuery(BY_CODIGO_STMT);
		Rubro rubro = null;
		try {
			query.
				setParameter("codigo", codigo).
				setParameter("materia", materia).
				setParameter("tipoInstancia", tipoInstancia);
			rubro = (Rubro)query.getSingleResult();
		} catch (Exception e) {
		}
		return rubro;
	}

    static public Rubro findByCodigoWithCamara(EntityManager entityManager, String codigo, Materia materia, Camara camara, TipoInstancia tipoInstancia) {
		Query query = entityManager.createQuery(BY_CODIGO_CAMARA_STMT);
		Rubro rubro = null;
		try {
			query.
				setParameter("codigo", codigo).
				setParameter("materia", materia).
				setParameter("camara", camara).
				setParameter("tipoInstancia", tipoInstancia);
			rubro = (Rubro)query.getSingleResult();
		} catch (NoResultException e) {
			return findByCodigo(entityManager, codigo, materia, tipoInstancia);
		}
		return rubro;
	}

    public Rubro findByUuid(String uuid) {
    	return findByUuid (getEntityManager(), uuid); 
	}

    static public Rubro findByUuid(EntityManager entityManager, String rubroUuid) {
		Query query = entityManager.createQuery(BY_UUID_STMT);
		Rubro rubro = null;
		try {
			query.setParameter("uuid", rubroUuid);
			rubro = (Rubro)query.getSingleResult();
		} catch (Exception e) {
		}
		return rubro;
	}

    /**
     * Returns the codigo search filter
     * 
     * @return	the codigo search filter
     */
    public String getCodigo() {
    	return codigo;
    }

    /**
     * Sets the codigo search filter
     * 
     * @param codigo the codigo search filter
     */
    public void setCodigo(String codigo) {
    	this.codigo = codigo;
    }
    
   /**
     * Clears the codigo search filter
     */
    public void clearCodigo() {
    	setCodigo(null);
    }

    /**
     * Returns the descripcion search filter
     * 
     * @return	the descripcion search filter
     */
    public String getDescripcion() {
    	return descripcion;
    }

    /**
     * Sets the descripcion search filter
     * 
     * @param descripcion the descripcion search filter
     */
    public void setDescripcion(String descripcion) {
    	this.descripcion = descripcion;
    }
    
   /**
     * Clears the descripcion search filter
     */
    public void clearDescripcion() {
    	setDescripcion(null);
    }

    /**
     * Returns the materia search filter
     * 
     * @return	the materia search filter
     */
    public Materia getMateria() {
    	return materia;
    }

    /**
     * Sets the materia search filter
     * 
     * @param materia the materia search filter
     */
    public void setMateria(Materia materia) {
    	this.materia = materia;
    }
    
   /**
     * Clears the materia search filter
     */
    public void clearMateria() {
    	setMateria(null);
    }

    /**
     * Returns the tipoInstancia search filter
     * 
     * @return	the tipoInstancia search filter
     */
    public TipoInstancia getTipoInstancia() {
    	return tipoInstancia;
    }

    /**
     * Sets the tipoInstancia search filter
     * 
     * @param tipoInstancia the tipoInstancia search filter
     */
    public void setTipoInstancia(TipoInstancia tipoInstancia) {
    	this.tipoInstancia = tipoInstancia;
    }
    
   /**
     * Clears the tipoInstancia search filter
     */
    public void clearTipoInstancia() {
    	setTipoInstancia(null);
    }



	public RubroSearch getFilter() {
		if (filter == null) {
			filter = new RubroSearch();
		}
		return filter;
	}

    @Override
    public void updateFilters() {
		getFilter().setCodigo(getCodigo());
		getFilter().setDescripcion(getDescripcion());
		getFilter().setMateria(getMateria());
		getFilter().setTipoInstancia(getTipoInstancia());
	}


}

