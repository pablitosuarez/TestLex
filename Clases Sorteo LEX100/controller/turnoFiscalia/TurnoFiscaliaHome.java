package com.base100.lex100.controller.entity.turnoFiscalia;

import java.util.Date;

import javax.faces.event.ValueChangeEvent;

import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.international.StatusMessage;

import com.base100.expand.json.JSONException;
import com.base100.expand.json.JSONObject;
import com.base100.expand.seam.framework.entity.AbstractEntityHome;
import com.base100.expand.seam.framework.entity.EntityOperationException;
import com.base100.expand.seam.framework.entity.LookupEntitySelectionListener;
import com.base100.lex100.controller.entity.fiscalia.FiscaliaSearch;
import com.base100.lex100.controller.entity.oficina.OficinaSearch;
import com.base100.lex100.entity.Fiscalia;
import com.base100.lex100.entity.Oficina;
import com.base100.lex100.entity.TurnoFiscalia;

/**
 * Class for TurnoFiscalia Home objects.
 * 
 * Generated by Expand.
 *
 */
@Name("turnoFiscaliaHome")
public class TurnoFiscaliaHome extends AbstractEntityHome<TurnoFiscalia>
{
    @In(create=true)
    private OficinaSearch oficinaSearch;
	private String oficinaCodigo;
    @In(create=true)
    private TurnoFiscaliaSearch turnoFiscaliaSearch;
    
    private Date lastDate = null;

	/**
     * Set/change the entity being managed by id.
     * 
     * @param id new instance id
     */
    public void setTurnoFiscaliaId(Integer id) {
        setId(id);
    }

    /**
     * Returns the current instance id.
     * 
     * @return the current id.
     */
    public Integer getTurnoFiscaliaId() {
        return (Integer) getId();
    }

    @Override
    protected void initInstance() {
    	super.initInstance();
		oficinaCodigo = null;
   }

    @Override
    public String doCancel() {
		oficinaCodigo = null;
    	return super.doCancel();
    }

    
    public boolean isWired() {
        return true;
    }

    /**
     * Get the managed entity, or null if the id is not defined.
     * 
     * @return the managed entity, if any.
     */
    public TurnoFiscalia getDefinedInstance() {
        return isIdDefined() ? getInstance() : null;
    }
 	

    @Override
	public String serializeId(TurnoFiscalia turnoFiscalia) {
		JSONObject jsonObject = new JSONObject();
		try {
			jsonObject.put("Id", turnoFiscalia.getId());
		} catch (JSONException e) {
		}
		return jsonObject.toString(); 
	}

// Lookups


	/**
	 * Action method called from the lookup button/link to select the oficina property.   
	 * 
	 * @param toPage		the page to go
	 * @param returnPage	the page to return after selection was done. 
	 */
	public String lookupOficina(String toPage, String returnPage) {
		lookupOficina(returnPage); 
		return toPage;
	}

	/**
	 * Action method called from the lookup button/link to select the oficina property.   
	 * 
	 * @param returnPage	the page to return after selection was done. 
	 */
	public void lookupOficina(String returnPage) {
		initializeLookup(oficinaSearch, new LookupEntitySelectionListener<Oficina>(returnPage, Oficina.class) {
			public void updateLookup(Oficina entity) {
				getInstance().setOficina(entity);
				oficinaCodigo = null;
			}
		});
	}

	public String getOficinaCodigo() {
		if(this.oficinaCodigo == null){
			this.oficinaCodigo = (getInstance().getOficina() != null)? getInstance().getOficina().getCodigo(): null;
		}
		return this.oficinaCodigo;
	}

	public void setOficinaCodigo(String oficinaCodigo) {
		this.oficinaCodigo = oficinaCodigo;
	}

	public void onChangeOficinaCodigo(ValueChangeEvent event) {
		setOficinaCodigo((String)(event.getNewValue()));
		updateOficina();
	}
	
	private void updateOficina() {
		getInstance().setOficina(oficinaSearch.findByNaturalKey(this.oficinaCodigo));
	}

	/**
	 * Action method called from the lookup button/link to select the search oficina property.   
	 * 
	 * @param toPage		the page to go
	 * @param returnPage	the page to return after selection was done. 
	 */
	public String lookupSearchOficina(String toPage, String returnPage) {
		lookupSearchOficina(returnPage); 
		return toPage;
	}

	/**
	 * Action method called from the lookup button/link to select the search oficina property.   
	 * 
	 * @param returnPage	the page to return after selection was done. 
	 */
	public void lookupSearchOficina(String returnPage) {
		initializeLookup(oficinaSearch, new LookupEntitySelectionListener<Oficina>(returnPage, Oficina.class) {
			public void updateLookup(Oficina entity) {
				turnoFiscaliaSearch.setOficina(entity);
			}
		});
	}

// Validation

// Operation event callbacks

	@Override
	public void afterSelect(){
	}

	@Override
	public void afterNew(TurnoFiscalia turnoFiscalia) {
		turnoFiscalia.setDesdeFecha(lastDate);
		turnoFiscalia.setTipoOficinaTurno(turnoFiscaliaSearch.getTipoOficinaTurno());
	}

	private boolean checkRequired(TurnoFiscalia turnoFiscalia) {
		boolean error = false;
		if (turnoFiscalia.getDesdeFecha() == null) {
			error = true;
			addStatusMessage(StatusMessage.Severity.ERROR, "#{messages['turnoFiscalia.desdeFecha']} :" + org.jboss.seam.international.Messages.instance().get("error_notnull"));
		}
		if (turnoFiscalia.getOficina() == null) {
			error = true;
			addStatusMessage(StatusMessage.Severity.ERROR, "#{messages['turnoFiscalia.oficina']} :" + org.jboss.seam.international.Messages.instance().get("error_notnull"));
		}
		return error;
	}

	@Override
	public void beforeAdd(TurnoFiscalia turnoFiscalia) throws EntityOperationException {
		boolean error = false;
		if (turnoFiscaliaSearch.findByUuid(turnoFiscalia.getUuid()) != null){
			error = true;
			addStatusMessage(StatusMessage.Severity.ERROR, org.jboss.seam.international.Messages.instance().get("error_duplicated_id") + " ("  + "UUID" + ")");
		}

		error |= checkRequired(turnoFiscalia);
		if (error) {
			throw new EntityOperationException();
		}
	}
	
	@Override
	public void beforeUpdate(TurnoFiscalia turnoFiscalia) throws EntityOperationException {
		boolean error = false;
		error |= checkRequired(turnoFiscalia);
		if (error) {
			throw new EntityOperationException();
		}
	}
	
	@Override
	public void beforeDelete(TurnoFiscalia turnoFiscalia) throws EntityOperationException {
	}

	@Override
	public void afterUpdate(TurnoFiscalia turnoFiscalia) throws EntityOperationException {
	}
	
	@Override
	public void afterAdd(TurnoFiscalia turnoFiscalia) throws EntityOperationException {
	}

	@Override
	public void afterDelete(TurnoFiscalia turnoFiscalia) throws EntityOperationException {
	}



}

