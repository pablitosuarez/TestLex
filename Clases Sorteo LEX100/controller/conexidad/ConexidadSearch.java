package com.base100.lex100.controller.entity.conexidad;

import com.base100.expand.seam.framework.entity.AbstractEntitySearch;
import com.base100.lex100.entity.Conexidad;
import com.base100.lex100.entity.Expediente;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.intercept.BypassInterceptors;



/**
 * Class for Conexidad search filters.
 * 
 * Generated by Expand.
 *
 */
@Name("conexidadSearch")
@BypassInterceptors
public class ConexidadSearch extends AbstractEntitySearch<Conexidad>
{

	static public final String BY_UUID_STMT = 
		"FROM Conexidad conexidad WHERE " +
	    "conexidad.uuid = :uuid";

	private String tipo;
	private Expediente expedienteOrigen;
	private Expediente expedienteRelacionado;

	private ConexidadSearch filter;

	public ConexidadSearch() {
		setDefaultOrder("conexidad.tipo desc, conexidad.orden");
	}

	@Override
	public void clear() {
		this.tipo = null;
		this.expedienteOrigen = null;
		this.expedienteRelacionado = null;
	}

	@Override
	public String getInitialPanelState()  {
		if (true
			&& this.tipo == null
			&& this.expedienteOrigen == null
			&& this.expedienteRelacionado == null

	    ){
			return getPanelState();
		} else {
			return "open";
		}
	}

	@Override
	public boolean hasActiveSearch() {
		// TODO Auto-generated method stub
		return false;
	}


    public Conexidad findByUuid(String uuid) {
    	return findByUuid (getEntityManager(), uuid); 
	}

    static public Conexidad findByUuid(EntityManager entityManager, String conexidadUuid) {
		Query query = entityManager.createQuery(BY_UUID_STMT);
		Conexidad conexidad = null;
		try {
			query.setParameter("uuid", conexidadUuid);
			conexidad = (Conexidad)query.getSingleResult();
		} catch (Exception e) {
		}
		return conexidad;
	}

    /**
     * Returns the tipo search filter
     * 
     * @return	the tipo search filter
     */
    public String getTipo() {
    	return tipo;
    }

    /**
     * Sets the tipo search filter
     * 
     * @param tipo the tipo search filter
     */
    public void setTipo(String tipo) {
    	this.tipo = tipo;
    }
    
   /**
     * Clears the tipo search filter
     */
    public void clearTipo() {
    	setTipo(null);
    }

    /**
     * Returns the expedienteOrigen search filter
     * 
     * @return	the expedienteOrigen search filter
     */
    public Expediente getExpedienteOrigen() {
    	return expedienteOrigen;
    }

    /**
     * Sets the expedienteOrigen search filter
     * 
     * @param expedienteOrigen the expedienteOrigen search filter
     */
    public void setExpedienteOrigen(Expediente expedienteOrigen) {
    	this.expedienteOrigen = expedienteOrigen;
    }
    
   /**
     * Clears the expedienteOrigen search filter
     */
    public void clearExpedienteOrigen() {
    	setExpedienteOrigen(null);
    }

    /**
     * Returns the expedienteRelacionado search filter
     * 
     * @return	the expedienteRelacionado search filter
     */
    public Expediente getExpedienteRelacionado() {
    	return expedienteRelacionado;
    }

    /**
     * Sets the expedienteRelacionado search filter
     * 
     * @param expedienteRelacionado the expedienteRelacionado search filter
     */
    public void setExpedienteRelacionado(Expediente expedienteRelacionado) {
    	this.expedienteRelacionado = expedienteRelacionado;
    }
    
   /**
     * Clears the expedienteRelacionado search filter
     */
    public void clearExpedienteRelacionado() {
    	setExpedienteRelacionado(null);
    }



	public ConexidadSearch getFilter() {
		if (filter == null) {
			filter = new ConexidadSearch();
		}
		return filter;
	}

    @Override
    public void updateFilters() {
		getFilter().setTipo(getTipo());
		getFilter().setExpedienteOrigen(getExpedienteOrigen());
		getFilter().setExpedienteRelacionado(getExpedienteRelacionado());
	}


}

