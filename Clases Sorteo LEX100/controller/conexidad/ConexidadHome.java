package com.base100.lex100.controller.entity.conexidad;

import com.base100.expand.json.JSONException;
import com.base100.expand.json.JSONObject;
import com.base100.expand.seam.framework.entity.AbstractEntityHome;
import com.base100.expand.seam.framework.entity.EntityOperationException;
import com.base100.expand.seam.framework.entity.LookupEntitySelectionListener;
import com.base100.lex100.controller.entity.criterioCnx.CriterioCnxSearch;
import com.base100.lex100.controller.entity.expediente.ExpedienteSearch;
import com.base100.lex100.entity.Conexidad;
import com.base100.lex100.entity.CriterioCnx;
import com.base100.lex100.entity.Expediente;
import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.international.StatusMessage;

/**
 * Class for Conexidad Home objects.
 * 
 * Generated by Expand.
 *
 */
@Name("conexidadHome")
public class ConexidadHome extends AbstractEntityHome<Conexidad>
{
    @In(create=true)
    private ExpedienteSearch expedienteSearch;
    @In(create=true)
    private CriterioCnxSearch criterioCnxSearch;
    @In(create=true)
    private ConexidadSearch conexidadSearch;

    /**
     * Set/change the entity being managed by id.
     * 
     * @param id new instance id
     */
    public void setConexidadId(Integer id) {
        setId(id);
    }

    /**
     * Returns the current instance id.
     * 
     * @return the current id.
     */
    public Integer getConexidadId() {
        return (Integer) getId();
    }

    
    public boolean isWired() {
        return true;
    }

    /**
     * Get the managed entity, or null if the id is not defined.
     * 
     * @return the managed entity, if any.
     */
    public Conexidad getDefinedInstance() {
        return isIdDefined() ? getInstance() : null;
    }
 	

    @Override
	public String serializeId(Conexidad conexidad) {
		JSONObject jsonObject = new JSONObject();
		try {
			jsonObject.put("Id", conexidad.getId());
		} catch (JSONException e) {
		}
		return jsonObject.toString(); 
	}

// Lookups


	/**
	 * Action method called from the lookup button/link to select the expedienteOrigen property.   
	 * 
	 * @param toPage		the page to go
	 * @param returnPage	the page to return after selection was done. 
	 */
	public String lookupExpedienteOrigen(String toPage, String returnPage) {
		lookupExpedienteOrigen(returnPage); 
		return toPage;
	}

	/**
	 * Action method called from the lookup button/link to select the expedienteOrigen property.   
	 * 
	 * @param returnPage	the page to return after selection was done. 
	 */
	public void lookupExpedienteOrigen(String returnPage) {
		initializeLookup(expedienteSearch, new LookupEntitySelectionListener<Expediente>(returnPage, Expediente.class) {
			public void updateLookup(Expediente entity) {
				getInstance().setExpedienteOrigen(entity);
			}
		});
	}


	/**
	 * Action method called from the lookup button/link to select the search expedienteOrigen property.   
	 * 
	 * @param toPage		the page to go
	 * @param returnPage	the page to return after selection was done. 
	 */
	public String lookupSearchExpedienteOrigen(String toPage, String returnPage) {
		lookupSearchExpedienteOrigen(returnPage); 
		return toPage;
	}

	/**
	 * Action method called from the lookup button/link to select the search expedienteOrigen property.   
	 * 
	 * @param returnPage	the page to return after selection was done. 
	 */
	public void lookupSearchExpedienteOrigen(String returnPage) {
		initializeLookup(expedienteSearch, new LookupEntitySelectionListener<Expediente>(returnPage, Expediente.class) {
			public void updateLookup(Expediente entity) {
				conexidadSearch.setExpedienteOrigen(entity);
			}
		});
	}


	/**
	 * Action method called from the lookup button/link to select the expedienteRelacionado property.   
	 * 
	 * @param toPage		the page to go
	 * @param returnPage	the page to return after selection was done. 
	 */
	public String lookupExpedienteRelacionado(String toPage, String returnPage) {
		lookupExpedienteRelacionado(returnPage); 
		return toPage;
	}

	/**
	 * Action method called from the lookup button/link to select the expedienteRelacionado property.   
	 * 
	 * @param returnPage	the page to return after selection was done. 
	 */
	public void lookupExpedienteRelacionado(String returnPage) {
		initializeLookup(expedienteSearch, new LookupEntitySelectionListener<Expediente>(returnPage, Expediente.class) {
			public void updateLookup(Expediente entity) {
				getInstance().setExpedienteRelacionado(entity);
			}
		});
	}


	/**
	 * Action method called from the lookup button/link to select the search expedienteRelacionado property.   
	 * 
	 * @param toPage		the page to go
	 * @param returnPage	the page to return after selection was done. 
	 */
	public String lookupSearchExpedienteRelacionado(String toPage, String returnPage) {
		lookupSearchExpedienteRelacionado(returnPage); 
		return toPage;
	}

	/**
	 * Action method called from the lookup button/link to select the search expedienteRelacionado property.   
	 * 
	 * @param returnPage	the page to return after selection was done. 
	 */
	public void lookupSearchExpedienteRelacionado(String returnPage) {
		initializeLookup(expedienteSearch, new LookupEntitySelectionListener<Expediente>(returnPage, Expediente.class) {
			public void updateLookup(Expediente entity) {
				conexidadSearch.setExpedienteRelacionado(entity);
			}
		});
	}

	public void lookupAddToCriterioCnxList(String returnPage) {
		initializeLookup(criterioCnxSearch, new LookupEntitySelectionListener<CriterioCnx>(returnPage, CriterioCnx.class) {
			public void updateLookup(CriterioCnx entity) {
				if(!getInstance().getCriterioCnxList().contains(entity)){
					getInstance().getCriterioCnxList().add(entity);
				}else{
					addStatusMessage(StatusMessage.Severity.ERROR, org.jboss.seam.international.Messages.instance().get("error_exist"));
				}				
			}
		});
	}
	
	public void lookupAddToCriterioCnxListMultiple(String returnPage) {
		initializeLookup(criterioCnxSearch, new LookupEntitySelectionListener<CriterioCnx>(returnPage, CriterioCnx.class, true) {
			public void updateLookup(CriterioCnx entity) {
				if(!getInstance().getCriterioCnxList().contains(entity)){
					getInstance().getCriterioCnxList().add(entity);
				}else{
					// TODO: uncomment this to check duplicates.
					//	addStatusMessage(StatusMessage.Severity.ERROR, org.jboss.seam.international.Messages.instance().get("error_exist"));
					//
				}				
			}
			
			public void finishSelection() {
				super.finishSelection();
			}
		});
	}

	public void removeFromCriterioCnxList(CriterioCnx entity){
		getInstance().getCriterioCnxList().remove(entity);
	}

// Validation

// Operation event callbacks

	@Override
	public void afterSelect(){
	}

	@Override
	public void afterNew(Conexidad conexidad) {
        conexidad.setTipo("A");
        
        // settings of default values for properties can be inserted here

	}

	private boolean checkRequired() {
		boolean error = false;
		if (getInstance().getExpedienteOrigen() == null) {
			error = true;
			addStatusMessage(StatusMessage.Severity.ERROR, "#{messages['conexidad.expedienteOrigen']} :" + org.jboss.seam.international.Messages.instance().get("error_notnull"));
		}
		if (getInstance().getExpedienteRelacionado() == null) {
			error = true;
			addStatusMessage(StatusMessage.Severity.ERROR, "#{messages['conexidad.expedienteRelacionado']} :" + org.jboss.seam.international.Messages.instance().get("error_notnull"));
		}
		return error;
	}

	@Override
	public void beforeAdd(Conexidad conexidad) throws EntityOperationException {
		boolean error = false;
		if (conexidadSearch.findByUuid(conexidad.getUuid()) != null){
			error = true;
			addStatusMessage(StatusMessage.Severity.ERROR, org.jboss.seam.international.Messages.instance().get("error_duplicated_id") + " ("  + "UUID" + ")");
		}

		error |= checkRequired();
		if (error) {
			throw new EntityOperationException();
		}
	}
	
	@Override
	public void beforeUpdate(Conexidad conexidad) throws EntityOperationException {
		boolean error = false;
		error |= checkRequired();
		if (error) {
			throw new EntityOperationException();
		}
	}
	
	@Override
	public void beforeDelete(Conexidad conexidad) throws EntityOperationException {
	}

	@Override
	public void afterUpdate(Conexidad conexidad) throws EntityOperationException {
	}
	
	@Override
	public void afterAdd(Conexidad conexidad) throws EntityOperationException {
	}

	@Override
	public void afterDelete(Conexidad conexidad) throws EntityOperationException {
	}


	/**
	 * TODO Auto-generated method stub
	 */
	public void lookupListMultiple(String returnPage) {
		initializeLookup(conexidadSearch, new LookupEntitySelectionListener<Conexidad>(returnPage, Conexidad.class, true) {
			public void updateLookup(Conexidad entity) {
				// TODO replace this code by the appropriate multiselection action code for each item..			
			}
			@Override
			public void finishSelection() {
				super.finishSelection();
				// TODO add the appropriate ending code.			
			}
		});
	}

}

