package com.base100.lex100.controller.entity.turnoPolicia;

import javax.faces.event.ValueChangeEvent;

import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.international.StatusMessage;

import com.base100.expand.json.JSONException;
import com.base100.expand.json.JSONObject;
import com.base100.expand.seam.framework.entity.AbstractEntityHome;
import com.base100.expand.seam.framework.entity.EntityOperationException;
import com.base100.expand.seam.framework.entity.LookupEntitySelectionListener;
import com.base100.lex100.component.enumeration.TipoOficinaEnumeration;
import com.base100.lex100.controller.entity.oficina.OficinaList;
import com.base100.lex100.controller.entity.oficina.OficinaSearch;
import com.base100.lex100.controller.entity.tipoOficina.TipoOficinaSearch;
import com.base100.lex100.entity.Oficina;
import com.base100.lex100.entity.TipoOficina;
import com.base100.lex100.entity.TurnoPolicia;

/**
 * Class for TurnoPolicia Home objects.
 * 
 * Generated by Expand.
 *
 */
@Name("turnoPoliciaHome")
public class TurnoPoliciaHome extends AbstractEntityHome<TurnoPolicia>
{
    @In(create=true)
    private OficinaSearch oficinaSearch;
    @In(create=true)
    private OficinaList oficinaList;

    private String oficinaCodigo;
    @In(create=true)
    private TurnoPoliciaSearch turnoPoliciaSearch;

    /**
     * Set/change the entity being managed by id.
     * 
     * @param id new instance id
     */
    public void setTurnoPoliciaId(Integer id) {
        setId(id);
    }

    /**
     * Returns the current instance id.
     * 
     * @return the current id.
     */
    public Integer getTurnoPoliciaId() {
        return (Integer) getId();
    }

    @Override
    protected void initInstance() {
    	super.initInstance();
		oficinaCodigo = null;
   }

    @Override
    public String doCancel() {
		oficinaCodigo = null;
    	return super.doCancel();
    }

    
    public boolean isWired() {
        return true;
    }

    /**
     * Get the managed entity, or null if the id is not defined.
     * 
     * @return the managed entity, if any.
     */
    public TurnoPolicia getDefinedInstance() {
        return isIdDefined() ? getInstance() : null;
    }
 	

    @Override
	public String serializeId(TurnoPolicia turnoPolicia) {
		JSONObject jsonObject = new JSONObject();
		try {
			jsonObject.put("Id", turnoPolicia.getId());
		} catch (JSONException e) {
		}
		return jsonObject.toString(); 
	}

// Lookups


	/**
	 * Action method called from the lookup button/link to select the oficina property.   
	 * 
	 * @param toPage		the page to go
	 * @param returnPage	the page to return after selection was done. 
	 */
	public String lookupOficina(String toPage, String returnPage) {
		lookupOficina(returnPage); 
		return toPage;
	}

	/**
	 * Action method called from the lookup button/link to select the oficina property.   
	 * 
	 * @param returnPage	the page to return after selection was done. 
	 */
	public void lookupOficina(String returnPage) {
		oficinaSearch.clear();
		TipoOficina tipoJuzgado = TipoOficinaSearch.findByCodigo(getEntityManager(), TipoOficinaEnumeration.TIPO_OFICINA_JUZGADO);
		oficinaSearch.setTipoOficina(tipoJuzgado);
		oficinaSearch.setShowTipoOficinaFilter(false);
		oficinaSearch.updateFilters();
		initializeLookup(oficinaSearch, new LookupEntitySelectionListener<Oficina>(returnPage, Oficina.class) {
			public void updateLookup(Oficina entity) {
				getInstance().setOficina(entity);
				oficinaCodigo = null;
			}
		});
	}

	/**
	 * Action method called from the clear lookup button/link to clear the oficina property.   
	 */
	public void clearLookupOficina() {
		getInstance().setOficina(null);
				oficinaCodigo = null;
	}

	public String getOficinaCodigo() {
		if(this.oficinaCodigo == null){
			this.oficinaCodigo = (getInstance().getOficina() != null)? getInstance().getOficina().getCodigo(): null;
		}
		return this.oficinaCodigo;
	}

	public void setOficinaCodigo(String oficinaCodigo) {
		this.oficinaCodigo = oficinaCodigo;
	}

	public void onChangeOficinaCodigo(ValueChangeEvent event) {
		setOficinaCodigo((String)(event.getNewValue()));
		updateOficina();
	}
	
	private void updateOficina() {
		getInstance().setOficina(oficinaSearch.findByNaturalKey(this.oficinaCodigo));
	}

	/**
	 * Action method called from the lookup button/link to select the search oficina property.   
	 * 
	 * @param toPage		the page to go
	 * @param returnPage	the page to return after selection was done. 
	 */
	public String lookupSearchOficina(String toPage, String returnPage) {
		lookupSearchOficina(returnPage); 
		return toPage;
	}

	/**
	 * Action method called from the lookup button/link to select the search oficina property.   
	 * 
	 * @param returnPage	the page to return after selection was done. 
	 */
	public void lookupSearchOficina(String returnPage) {
		oficinaSearch.clear();
		TipoOficina tipoJuzgado = TipoOficinaSearch.findByCodigo(getEntityManager(), TipoOficinaEnumeration.TIPO_OFICINA_JUZGADO);
		oficinaSearch.setTipoOficina(tipoJuzgado);
		oficinaSearch.setShowTipoOficinaFilter(false);
		oficinaSearch.updateFilters();
		initializeLookup(oficinaSearch, new LookupEntitySelectionListener<Oficina>(returnPage, Oficina.class) {
			public void updateLookup(Oficina entity) {
				turnoPoliciaSearch.setOficina(entity);
			}
		});
	}

// Validation

// Operation event callbacks

	@Override
	public void afterSelect(){
	}

	@Override
	public void afterNew(TurnoPolicia turnoPolicia) {
        
        // settings of default values for properties can be inserted here

	}

	private boolean checkRequired(TurnoPolicia turnoPolicia) {
		boolean error = false;
		if (turnoPolicia.getDesdeFecha() == null) {
			error = true;
			addStatusMessage(StatusMessage.Severity.ERROR, "#{messages['turnoPolicia.desdeFecha']} :" + org.jboss.seam.international.Messages.instance().get("error_notnull"));
		}
		return error;
	}

	@Override
	public void beforeAdd(TurnoPolicia turnoPolicia) throws EntityOperationException {
		boolean error = false;
		if (turnoPoliciaSearch.findByUuid(turnoPolicia.getUuid()) != null){
			error = true;
			addStatusMessage(StatusMessage.Severity.ERROR, org.jboss.seam.international.Messages.instance().get("error_duplicated_id") + " ("  + "UUID" + ")");
		}

		error |= checkRequired(turnoPolicia);
		if (error) {
			throw new EntityOperationException();
		}
	}
	
	@Override
	public void beforeUpdate(TurnoPolicia turnoPolicia) throws EntityOperationException {
		boolean error = false;
		error |= checkRequired(turnoPolicia);
		if (error) {
			throw new EntityOperationException();
		}
	}
	
	@Override
	public void beforeDelete(TurnoPolicia turnoPolicia) throws EntityOperationException {
	}

	@Override
	public void afterUpdate(TurnoPolicia turnoPolicia) throws EntityOperationException {
	}
	
	@Override
	public void afterAdd(TurnoPolicia turnoPolicia) throws EntityOperationException {
	}

	@Override
	public void afterDelete(TurnoPolicia turnoPolicia) throws EntityOperationException {
	}



}

