package com.base100.lex100.controller.entity.turnoPolicia;

import java.util.Date;
import java.util.List;

import javax.faces.event.ValueChangeEvent;
import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.intercept.BypassInterceptors;

import com.base100.expand.seam.framework.entity.AbstractEntitySearch;
import com.base100.lex100.component.configuration.SessionState;
import com.base100.lex100.controller.entity.oficina.OficinaSearch;
import com.base100.lex100.entity.Camara;
import com.base100.lex100.entity.Oficina;
import com.base100.lex100.entity.TurnoPolicia;
import com.base100.lex100.manager.camara.CamaraManager;



/**
 * Class for TurnoPolicia search filters.
 * 
 * Generated by Expand.
 *
 */
@Name("turnoPoliciaSearch")
@BypassInterceptors
public class TurnoPoliciaSearch extends AbstractEntitySearch<TurnoPolicia>
{

	static public final String BY_UUID_STMT = 
		"FROM TurnoPolicia turnoPolicia WHERE " +
	    "turnoPolicia.uuid = :uuid and status <> -1";

	static public final String BY_FECHA_STMT = 
		"FROM TurnoPolicia turnoPolicia WHERE " +
		"turnoPolicia.oficina.camara.id = :camaraId and " +
	    "turnoPolicia.desdeFecha  <= :fecha and status <> -1 order by turnoPolicia.desdeFecha desc";

	private Date fromDesdeFecha;
	private Date toDesdeFecha;
	private Oficina oficina;
	private String oficinaCodigo;

	private TurnoPoliciaSearch filter;

	public TurnoPoliciaSearch() {
		setDefaultOrder("turnoPolicia.desdeFecha desc");
	}

	@Override
	public void clear() {
		this.fromDesdeFecha = null;
		this.toDesdeFecha = null;
		this.oficina = null;
		this.oficinaCodigo = null;
	}

	@Override
	public String getInitialPanelState()  {
		if (true
			&& this.fromDesdeFecha == null
			&& this.toDesdeFecha == null
			&& this.oficina == null

	    ){
			return getPanelState();
		} else {
			return "open";
		}
	}

	@Override
	public boolean hasActiveSearch() {
		// TODO Auto-generated method stub
		return false;
	}


    public TurnoPolicia findByUuid(String uuid) {
    	return findByUuid (getEntityManager(), uuid); 
	}

    static public TurnoPolicia findByUuid(EntityManager entityManager, String turnoPoliciaUuid) {
		Query query = entityManager.createQuery(BY_UUID_STMT);
		TurnoPolicia turnoPolicia = null;
		try {
			query.setParameter("uuid", turnoPoliciaUuid);
			turnoPolicia = (TurnoPolicia)query.getSingleResult();
		} catch (Exception e) {
		}
		return turnoPolicia;
	}

    @SuppressWarnings("unchecked")
	static public TurnoPolicia findByFecha(EntityManager entityManager, Date fecha) {
    	Camara camara = SessionState.instance().getGlobalCamara();
    	if(camara != null){
    		Query query = entityManager.createQuery(BY_FECHA_STMT);
    		List<TurnoPolicia> turnosPolicia = query.setMaxResults(1)
    			.setParameter("fecha", fecha)
    			.setParameter("camaraId", camara.getId())
    			.getResultList();
    		if(turnosPolicia.size() > 0) {
    			return turnosPolicia.get(0);
    		}
    	}
		return null;
	}

    /**
     * Returns the fromDesdeFecha search filter
     * 
     * @return	the fromDesdeFecha search filter
     */
    public Date getFromDesdeFecha() {
    	return fromDesdeFecha;
    }

    /**
     * Sets the fromDesdeFecha search filter
     * 
     * @param fromDesdeFecha the fromDesdeFecha search filter
     */
    public void setFromDesdeFecha(Date fromDesdeFecha) {
    	this.fromDesdeFecha = fromDesdeFecha;
    }
    
   /**
     * Clears the fromDesdeFecha search filter
     */
    public void clearFromDesdeFecha() {
    	setFromDesdeFecha(null);
    }

    /**
     * Returns the toDesdeFecha search filter
     * 
     * @return	the toDesdeFecha search filter
     */
    public Date getToDesdeFecha() {
    	return toDesdeFecha;
    }

    /**
     * Sets the toDesdeFecha search filter
     * 
     * @param toDesdeFecha the toDesdeFecha search filter
     */
    public void setToDesdeFecha(Date toDesdeFecha) {
    	this.toDesdeFecha = toDesdeFecha;
    }
    
   /**
     * Clears the toDesdeFecha search filter
     */
    public void clearToDesdeFecha() {
    	setToDesdeFecha(null);
    }

    /**
     * Returns the oficina search filter
     * 
     * @return	the oficina search filter
     */
    public Oficina getOficina() {
    	return oficina;
    }

    /**
     * Sets the oficina search filter
     * 
     * @param oficina the oficina search filter
     */
    public void setOficina(Oficina oficina) {
    	this.oficina = oficina;
		this.oficinaCodigo = null;
    }
    
   /**
     * Clears the oficina search filter
     */
    public void clearOficina() {
    	setOficina(null);
    }

	public String getOficinaCodigo() {
		if(this.oficinaCodigo == null){
			this.oficinaCodigo = (getOficina() != null)? getOficina().getCodigo(): null;
		}
		return this.oficinaCodigo;
	}

	public void setOficinaCodigo(String oficinaCodigo) {
		this.oficinaCodigo = oficinaCodigo;
	}

	public void onChangeOficinaCodigo(ValueChangeEvent event) {
		setOficinaCodigo((String)(event.getNewValue()));
		updateOficina();
	}
	
	private void updateOficina() {
		setOficina(OficinaSearch.findByNaturalKey(getEntityManager(), this.oficinaCodigo));
	}
	


	public TurnoPoliciaSearch getFilter() {
		if (filter == null) {
			filter = new TurnoPoliciaSearch();
		}
		return filter;
	}

    @Override
    public void updateFilters() {
		getFilter().setFromDesdeFecha(getFromDesdeFecha());
		getFilter().setToDesdeFecha(getToDesdeFecha());
		getFilter().setOficina(getOficina());
		getFilter().setOficinaCodigo(getOficinaCodigo());
	}


}

