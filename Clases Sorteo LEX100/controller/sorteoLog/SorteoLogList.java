package com.base100.lex100.controller.entity.sorteoLog;

import java.util.List;
import java.util.ArrayList;

import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Name;

import com.base100.lex100.component.configuration.Configuration;
import com.base100.lex100.component.configuration.SessionState;
import com.base100.lex100.entity.SorteoLog;
import com.base100.lex100.manager.oficina.OficinaManager;
import com.base100.lex100.mesaEntrada.sorteo.MesaSorteo;
import com.base100.expand.seam.framework.entity.AbstractEntityList;
import com.base100.expand.seam.framework.entity.AbstractEntityHome;
import com.base100.expand.seam.framework.entity.AbstractEntitySearch;

/**
 * Class for SorteoLog List objects.
 * 
 * Generated by Expand.
 *
 */
@Name("sorteoLogList")
public class SorteoLogList extends AbstractEntityList<SorteoLog>
{
	@In(create=true)
	private Configuration configuration;
    @In(create=true)
    private SorteoLogSearch sorteoLogSearch;
    @In(create=true)
    private SorteoLogHome sorteoLogHome;
    private static final String[] FILTERS = {
		"lower(sorteoLog.codigoSorteo) like #{likePattern[sorteoLogSearch.filter.codigoSorteo]}",
		"sorteoLog.rubro = #{sorteoLogSearch.filter.rubro}",
		"lower(sorteoLog.informacionSorteo) like #{likePattern[sorteoLogSearch.filter.informacionSorteo]}",
		"sorteoLog.fechaSorteo >= #{sorteoLogSearch.filter.fromFechaSorteo}",
		"sorteoLog.fechaSorteo <= #{sorteoLogSearch.filter.toFechaSorteoFinal}",
		"lower(sorteoLog.expediente.clave) like #{likePattern[sorteoLogSearch.filter.claveExpediente]}",
		"lower(sorteoLog.usuario) like #{likePattern[sorteoLogSearch.filter.usuario]}",
		"sorteoLog.expediente = #{sorteoLogSearch.filter.expediente}",
		"sorteoLog.oficina = #{sorteoLogSearch.filter.oficina}",
		"sorteoLog.oficina.tipoInstancia = #{sorteoLogSearch.filter.tipoInstancia}",
		"sorteoLog.codigoSorteo in (#{sorteoLogList.codigosSorteoFilter})",
		"sorteoLog.codigoSorteo not in (#{sorteoLogList.codigosSorteoNotFilter})",
    };
	
    private static String[] byExpedienteRestrictions ={
		"sorteoLog.expediente = #{expedienteHome.isIdDefined() ? expedienteHome.instance : null}"
    };
    
    public List<SorteoLog> getbyExpedienteResultList(){
    	return getResultList(byExpedienteRestrictions);
    }

    public List<SorteoLog> getbyExpedienteAllResultList(){
    	return getAllResults(byExpedienteRestrictions);
    }
    private static String[] byOficinaRestrictions ={
		"sorteoLog.oficina = #{oficinaHome.isIdDefined() ? oficinaHome.instance : null}"
    };
    
    public List<SorteoLog> getbyOficinaResultList(){
    	return getResultList(byOficinaRestrictions);
    }

    public List<SorteoLog> getbyOficinaAllResultList(){
    	return getAllResults(byOficinaRestrictions);
    }

    public List<String> getCodigosSorteoFilter() {
		if(OficinaManager.instance().inMesaEntradaTribunalOral()) {
			return sorteoLogSearch.getCodigosSorteosTO();
		}
		return null;
	}
    
    public List<String> getCodigosSorteoNotFilter() {
		if(!OficinaManager.instance().inMesaEntradaTribunalOral()) {
			return sorteoLogSearch.getCodigosSorteosTO();
		}
		return null;
	}

    @Override
    public String getEjbql() 
    {
    	StringBuffer stmt = new StringBuffer("select sorteoLog from SorteoLog sorteoLog");
    	stmt.append(" where ((sorteoLog.oficina.camara =  #{sessionState.globalCamara}) or (sorteoLog.oficina is null and (sorteoLog.expediente.camara = #{sessionState.globalCamara})) ) ");
    	return stmt.toString();
    }

	@Override
    public String[] getFilters()
    {
        return FILTERS;
    }
    
    @Override
    public Integer getRowsPerPage()
    {
    	//return c	onfiguration.getRowsPerPage();
    	return 30;
    }
    
	public AbstractEntityHome<SorteoLog> getEntityHome() {
		return sorteoLogHome;
	}

	public AbstractEntitySearch<SorteoLog> getEntitySearch() {
		return sorteoLogSearch;
	}
	
	/* (non-Javadoc)
	 * @see com.base100.expand.seam.framework.entity.AbstractEntityList#doSelection(java.lang.Object, java.lang.String)
	 */
	public String doSelection (SorteoLog sorteoLog, String page) {
		return super.doSelection(sorteoLog, page);
	}

	public String doSelection (SorteoLog sorteoLog, String page, String returnPage) {
		page = doSelection(sorteoLog, page);
		if (returnPage != null) {
			getEntitySearch().setReturnPage(returnPage);
		}
		return page;
	}



}
