package com.base100.lex100.controller.entity.sorteoLog;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.intercept.BypassInterceptors;

import com.base100.expand.seam.framework.entity.AbstractEntitySearch;
import com.base100.lex100.component.configuration.SessionState;
import com.base100.lex100.component.enumeration.TipoInstanciaEnumeration;
import com.base100.lex100.component.enumeration.TipoRadicacionEnumeration;
import com.base100.lex100.controller.entity.tipoInstancia.TipoInstanciaSearch;
import com.base100.lex100.entity.Expediente;
import com.base100.lex100.entity.Oficina;
import com.base100.lex100.entity.Sorteo;
import com.base100.lex100.entity.SorteoLog;
import com.base100.lex100.entity.TipoInstancia;
import com.base100.lex100.mesaEntrada.sorteo.MesaSorteo;



/**
 * Class for SorteoLog search filters.
 * 
 * Generated by Expand.
 *
 */
@Name("sorteoLogSearch")
@BypassInterceptors
public class SorteoLogSearch extends AbstractEntitySearch<SorteoLog>
{


	private String codigoSorteo;
	private String rubro;
	private String informacionSorteo;
	private Date fromFechaSorteo;
	private Date toFechaSorteo;
	private String usuario;
	private String claveExpediente;
	private Expediente expediente;
	private Oficina oficina;
	private TipoInstancia tipoInstancia;
	private boolean showDetails = false;

	private List<String> codigosSorteosTO;
	
	private SorteoLogSearch filter;

	public SorteoLogSearch() {
		setDefaultOrder("fechaSorteo desc");
	}

	@Override
	public void clear() {
		this.codigoSorteo = null;
		this.rubro = null;
		this.informacionSorteo = null;
		this.fromFechaSorteo = null;
		this.toFechaSorteo = null;
		this.usuario = null;
		this.expediente = null;
		this.oficina = null;
		this.claveExpediente = null;
		this.tipoInstancia = null;
	}

	@Override
	public String getInitialPanelState()  {
		if (true
			&& this.codigoSorteo == null
			&& this.rubro == null
			&& this.informacionSorteo == null
			&& this.fromFechaSorteo == null
			&& this.toFechaSorteo == null
			&& this.usuario == null
			&& this.expediente == null
			&& this.oficina == null
			&& this.claveExpediente == null
			&& this.tipoInstancia == null

	    ){
			return getPanelState();
		} else {
			return "open";
		}
	}

	@Override
	public boolean hasActiveSearch() {
		// TODO Auto-generated method stub
		return false;
	}



    /**
     * Returns the codigoSorteo search filter
     * 
     * @return	the codigoSorteo search filter
     */
    public String getCodigoSorteo() {
    	return codigoSorteo;
    }

    /**
     * Sets the codigoSorteo search filter
     * 
     * @param codigoSorteo the codigoSorteo search filter
     */
    public void setCodigoSorteo(String codigoSorteo) {
    	this.codigoSorteo = codigoSorteo;
    }
    
   /**
     * Clears the codigoSorteo search filter
     */
    public void clearCodigoSorteo() {
    	setCodigoSorteo(null);
    }

    /**
     * Returns the rubro search filter
     * 
     * @return	the rubro search filter
     */
    public String getRubro() {
    	return rubro;
    }

    /**
     * Sets the rubro search filter
     * 
     * @param rubro the rubro search filter
     */
    public void setRubro(String rubro) {
    	this.rubro = rubro;
    }
    
   /**
     * Clears the rubro search filter
     */
    public void clearRubro() {
    	setRubro(null);
    }

    /**
     * Returns the informacionSorteo search filter
     * 
     * @return	the informacionSorteo search filter
     */
    public String getInformacionSorteo() {
    	return informacionSorteo;
    }

    /**
     * Sets the informacionSorteo search filter
     * 
     * @param informacionSorteo the informacionSorteo search filter
     */
    public void setInformacionSorteo(String informacionSorteo) {
    	this.informacionSorteo = informacionSorteo;
    }
    
   /**
     * Clears the informacionSorteo search filter
     */
    public void clearInformacionSorteo() {
    	setInformacionSorteo(null);
    }

    /**
     * Returns the fromFechaSorteo search filter
     * 
     * @return	the fromFechaSorteo search filter
     */
    public Date getFromFechaSorteo() {
    	return fromFechaSorteo;
    }

    /**
     * Sets the fromFechaSorteo search filter
     * 
     * @param fromFechaSorteo the fromFechaSorteo search filter
     */
    public void setFromFechaSorteo(Date fromFechaSorteo) {
    	this.fromFechaSorteo = fromFechaSorteo;
    }
    
   /**
     * Clears the fromFechaSorteo search filter
     */
    public void clearFromFechaSorteo() {
    	setFromFechaSorteo(null);
    }

    /**
     * Returns the toFechaSorteo search filter
     * 
     * @return	the toFechaSorteo search filter
     */
    public Date getToFechaSorteo() {
    	return toFechaSorteo;
    }

    /**
     * Sets the toFechaSorteo search filter
     * 
     * @param toFechaSorteo the toFechaSorteo search filter
     */
    public void setToFechaSorteo(Date toFechaSorteo) {
    	this.toFechaSorteo = toFechaSorteo;
    }
   
	public Date getToFechaSorteoFinal() {
		if (toFechaSorteo != null) {
			Calendar calendar = new GregorianCalendar();
			calendar.setTime(toFechaSorteo);
			calendar.add(Calendar.DAY_OF_YEAR, 1);
			return calendar.getTime();
		}
		return toFechaSorteo;
	}

   /**
     * Clears the toFechaSorteo search filter
     */
    public void clearToFechaSorteo() {
    	setToFechaSorteo(null);
    }

    /**
     * Returns the usuario search filter
     * 
     * @return	the usuario search filter
     */
    public String getUsuario() {
    	return usuario;
    }

    /**
     * Sets the usuario search filter
     * 
     * @param usuario the usuario search filter
     */
    public void setUsuario(String usuario) {
    	this.usuario = usuario;
    }
    
   /**
     * Clears the usuario search filter
     */
    public void clearUsuario() {
    	setUsuario(null);
    }

    /**
     * Returns the expediente search filter
     * 
     * @return	the expediente search filter
     */
    public Expediente getExpediente() {
    	return expediente;
    }

    /**
     * Sets the expediente search filter
     * 
     * @param expediente the expediente search filter
     */
    public void setExpediente(Expediente expediente) {
    	this.expediente = expediente;
    }
    
   /**
     * Clears the expediente search filter
     */
    public void clearExpediente() {
    	setExpediente(null);
    }

    /**
     * Returns the oficina search filter
     * 
     * @return	the oficina search filter
     */
    public Oficina getOficina() {
    	return oficina;
    }

    /**
     * Sets the oficina search filter
     * 
     * @param oficina the oficina search filter
     */
    public void setOficina(Oficina oficina) {
    	this.oficina = oficina;
    }
    
   /**
     * Clears the oficina search filter
     */
    public void clearOficina() {
    	setOficina(null);
    }



	public SorteoLogSearch getFilter() {
		if (filter == null) {
			filter = new SorteoLogSearch();
		}
		return filter;
	}

    @Override
    public void updateFilters() {
		getFilter().setCodigoSorteo(getCodigoSorteo());
		getFilter().setRubro(getRubro());
		getFilter().setInformacionSorteo(getInformacionSorteo());
		getFilter().setFromFechaSorteo(getFromFechaSorteo());
		getFilter().setToFechaSorteo(getToFechaSorteo());
		getFilter().setUsuario(getUsuario());
		getFilter().setExpediente(getExpediente());
		getFilter().setOficina(getOficina());
		getFilter().setClaveExpediente(getClaveExpediente());
		getFilter().setTipoInstancia(getTipoInstancia());
	}

	public String getClaveExpediente() {
		return claveExpediente;
	}

	public void setClaveExpediente(String claveExpediente) {
		this.claveExpediente = claveExpediente;
	}

	public boolean isShowDetails() {
		return showDetails;
	}

	public void setShowDetails(boolean showDetails) {
		this.showDetails = showDetails;
	}

	public TipoInstancia getTipoInstancia() {
		return tipoInstancia;
	}

	public void setTipoInstancia(TipoInstancia tipoInstancia) {
		this.tipoInstancia = tipoInstancia;
	}

    public List<String> getCodigosSorteosTO() {
    	if (codigosSorteosTO == null) {
    		codigosSorteosTO = new ArrayList<String>();
    		TipoInstancia tipoInstanciaTO = TipoInstanciaSearch.findByAbreviatura(getEntityManager(), TipoInstanciaEnumeration.TIPO_INSTANCIA_TRIBUNAL_ORAL_ABREVIATURA);
    		List<Sorteo> sorteosTO = MesaSorteo.instance().findSorteosByAnyFilter(
    				TipoRadicacionEnumeration.Type.tribunalOral.getValue().toString(),
    				null, null,SessionState.instance().getGlobalCamara(), tipoInstanciaTO, null, null, null, null, false);
    		for(Sorteo sorteo:sorteosTO){
    			codigosSorteosTO.add(sorteo.getCodigo());
    		}
    	}
		return codigosSorteosTO;
	}

}

