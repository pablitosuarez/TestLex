package com.base100.lex100.controller.entity.criterioCnx;

import java.util.List;
import java.util.Set;

import javax.faces.event.ValueChangeEvent;

import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.international.StatusMessage;

import com.base100.expand.json.JSONException;
import com.base100.expand.json.JSONObject;
import com.base100.expand.seam.framework.entity.AbstractEntityHome;
import com.base100.expand.seam.framework.entity.EntityOperationException;
import com.base100.expand.seam.framework.entity.LookupEntitySelectionListener;
import com.base100.lex100.component.configuration.SessionState;
import com.base100.lex100.controller.entity.objetoJuicio.ObjetoJuicioHome;
import com.base100.lex100.controller.entity.objetoJuicio.ObjetoJuicioSelectionSearch;
import com.base100.lex100.controller.entity.tema.TemaHome;
import com.base100.lex100.controller.entity.tema.TemaSearch;
import com.base100.lex100.controller.entity.tipoCausa.TipoCausaHome;
import com.base100.lex100.entity.Camara;
import com.base100.lex100.entity.CriterioCnx;
import com.base100.lex100.entity.Materia;
import com.base100.lex100.entity.ObjetoJuicio;
import com.base100.lex100.entity.Tema;
import com.base100.lex100.entity.TipoCausa;

/**
 * Class for CriterioCnx Home objects.
 * 
 * Generated by Expand.
 *
 */
@Name("criterioCnxHome")
public class CriterioCnxHome extends AbstractEntityHome<CriterioCnx>
{
    @In(create=true)
    private ObjetoJuicioSelectionSearch objetoJuicioSelectionSearch;
    @In(create=true)
    private TemaSearch temaSearch;
    @In(create=true)
    private TemaHome temaHome;
    @In(create=true)
    private ObjetoJuicioHome objetoJuicioHome;
    @In(create=true)
    private TipoCausaHome tipoCausaHome;
	private String objetoJuicioCodigo;
    @In(create=true)
    private CriterioCnxSearch criterioCnxSearch;

    /**
     * Set/change the entity being managed by id.
     * 
     * @param id new instance id
     */
    public void setCriterioCnxId(Integer id) {
        setId(id);
    }

    /**
     * Returns the current instance id.
     * 
     * @return the current id.
     */
    public Integer getCriterioCnxId() {
        return (Integer) getId();
    }

    @Override
    protected void initInstance() {
    	super.initInstance();
		objetoJuicioCodigo = null;
   }

    @Override
    public String doCancel() {
		objetoJuicioCodigo = null;
    	return super.doCancel();
    }

    
    public boolean isWired() {
        return true;
    }

    /**
     * Get the managed entity, or null if the id is not defined.
     * 
     * @return the managed entity, if any.
     */
    public CriterioCnx getDefinedInstance() {
        return isIdDefined() ? getInstance() : null;
    }
 	

    @Override
	public String serializeId(CriterioCnx criterioCnx) {
		JSONObject jsonObject = new JSONObject();
		try {
			jsonObject.put("Id", criterioCnx.getId());
		} catch (JSONException e) {
		}
		return jsonObject.toString(); 
	}

// Lookups


	/**
	 * Action method called from the lookup button/link to select the objetoJuicio property.   
	 * 
	 * @param toPage		the page to go
	 * @param returnPage	the page to return after selection was done. 
	 */
	public String lookupObjetoJuicio(String toPage, String returnPage) {
		lookupObjetoJuicio(returnPage); 
		return toPage;
	}

	/**
	 * Action method called from the lookup button/link to select the objetoJuicio property.   
	 * 
	 * @param returnPage	the page to return after selection was done. 
	 */
	public void lookupObjetoJuicio(String returnPage) {
		initializeLookup(objetoJuicioSelectionSearch, new LookupEntitySelectionListener<ObjetoJuicio>(returnPage, ObjetoJuicio.class) {
			public void updateLookup(ObjetoJuicio entity) {
				getInstance().setObjetoJuicio(entity);
				objetoJuicioCodigo = null;
			}
		});
	}

	public String getObjetoJuicioCodigo() {
		if(this.objetoJuicioCodigo == null){
			this.objetoJuicioCodigo = (getInstance().getObjetoJuicio() != null)? getInstance().getObjetoJuicio().getCodigo(): null;
		}
		return this.objetoJuicioCodigo;
	}

	public void setObjetoJuicioCodigo(String objetoJuicioCodigo) {
		this.objetoJuicioCodigo = objetoJuicioCodigo;
	}

	public void onChangeObjetoJuicioCodigo(ValueChangeEvent event) {
		setObjetoJuicioCodigo((String)(event.getNewValue()));
		updateObjetoJuicio();
	}
	
	private void updateObjetoJuicio() {
		getInstance().setObjetoJuicio(objetoJuicioSelectionSearch.findByNaturalKey(this.objetoJuicioCodigo));
	}

	/**
	 * Action method called from the lookup button/link to select the search objetoJuicio property.   
	 * 
	 * @param toPage		the page to go
	 * @param returnPage	the page to return after selection was done. 
	 */
	public String lookupSearchObjetoJuicio(String toPage, String returnPage) {
		lookupSearchObjetoJuicio(returnPage); 
		return toPage;
	}

	/**
	 * Action method called from the lookup button/link to select the search objetoJuicio property.   
	 * 
	 * @param returnPage	the page to return after selection was done. 
	 */
	public void lookupSearchObjetoJuicio(String returnPage) {
		initializeLookup(objetoJuicioSelectionSearch, new LookupEntitySelectionListener<ObjetoJuicio>(returnPage, ObjetoJuicio.class) {
			public void updateLookup(ObjetoJuicio entity) {
				criterioCnxSearch.setObjetoJuicio(entity);
			}
		});
	}


	/**
	 * Action method called from the lookup button/link to select the tema property.   
	 * 
	 * @param toPage		the page to go
	 * @param returnPage	the page to return after selection was done. 
	 */
	public String lookupTema(String toPage, String returnPage) {
		lookupTema(returnPage); 
		return toPage;
	}

	/**
	 * Action method called from the lookup button/link to select the tema property.   
	 * 
	 * @param returnPage	the page to return after selection was done. 
	 */
	public void lookupTema(String returnPage) {
		initializeLookup(temaSearch, new LookupEntitySelectionListener<Tema>(returnPage, Tema.class) {
			public void updateLookup(Tema entity) {
				getInstance().setTema(entity);
			}
		});
	}

	/**
	 * Action method called from the clear lookup button/link to clear the tema property.   
	 */
	public void clearLookupTema() {
		getInstance().setTema(null);
	}


	/**
	 * Action method called from the lookup button/link to select the search tema property.   
	 * 
	 * @param toPage		the page to go
	 * @param returnPage	the page to return after selection was done. 
	 */
	public String lookupSearchTema(String toPage, String returnPage) {
		lookupSearchTema(returnPage); 
		return toPage;
	}

	/**
	 * Action method called from the lookup button/link to select the search tema property.   
	 * 
	 * @param returnPage	the page to return after selection was done. 
	 */
	public void lookupSearchTema(String returnPage) {
		initializeLookup(temaSearch, new LookupEntitySelectionListener<Tema>(returnPage, Tema.class) {
			public void updateLookup(Tema entity) {
				criterioCnxSearch.setTema(entity);
			}
		});
	}

	public void lookupAddToObjetoJuicioList(String returnPage) {
		initializeLookup(objetoJuicioSelectionSearch, new LookupEntitySelectionListener<ObjetoJuicio>(returnPage, ObjetoJuicio.class) {
			public void updateLookup(ObjetoJuicio entity) {
				if(!getInstance().getObjetoJuicioList().contains(entity)){
					getInstance().getObjetoJuicioList().add(entity);
				}else{
					addStatusMessage(StatusMessage.Severity.ERROR, org.jboss.seam.international.Messages.instance().get("error_exist"));
				}				
			}
		});
	}
	
	public void lookupAddToObjetoJuicioListMultiple(String returnPage) {
		initializeLookup(objetoJuicioSelectionSearch, new LookupEntitySelectionListener<ObjetoJuicio>(returnPage, ObjetoJuicio.class, true) {
			public void updateLookup(ObjetoJuicio entity) {
				if(!getInstance().getObjetoJuicioList().contains(entity)){
					getInstance().getObjetoJuicioList().add(entity);
				}else{
					// TODO: uncomment this to check duplicates.
					//	addStatusMessage(StatusMessage.Severity.ERROR, org.jboss.seam.international.Messages.instance().get("error_exist"));
					//
				}				
			}
			
			public void finishSelection() {
				super.finishSelection();
			}
		});
	}

	public void removeFromObjetoJuicioList(ObjetoJuicio entity){
		getInstance().getObjetoJuicioList().remove(entity);
	}

// Validation

// Operation event callbacks

	@Override
	public void afterSelect(){
	}

	@Override
	public void afterNew(CriterioCnx criterioCnx) {
        criterioCnx.setExcluirObjetosJuicio(false);

        Camara camara=(Camara)evaluateElExpression("#{sessionState.globalCamara}");
        if ( camara!=null )
        {
			criterioCnx.setCamara(camara);
        }

        ObjetoJuicio objetoJuicio=objetoJuicioHome.getDefinedInstance();
        if ( objetoJuicio != null ){
			criterioCnx.setObjetoJuicio(objetoJuicio);
        } else {
	        Tema tema=temaHome.getDefinedInstance();
	        if ( tema != null ) {
				criterioCnx.setTema(tema);
	        } else {
		        TipoCausa tipocausa=tipoCausaHome.getDefinedInstance();
		        if ( tipocausa != null ) {
					criterioCnx.setTipoCausa(tipocausa);
		        } else {
		        	Set<Materia> materias = SessionState.instance().getGlobalMateriaSet();
		        	if ((materias != null) && materias.size() == 1) {
		        		Materia materia = null;
		        		for (Materia globalMateria: materias) {
		        			materia = getEntityManager().find(Materia.class, globalMateria.getId());
		        			break;
		        		}
						criterioCnx.setMateria(materia);
		        	}
		        }
	        }
        }
        // settings of default values for properties can be inserted here

	}

	private boolean checkRequired(CriterioCnx criterioCnx) {
		boolean error = false;
		if (criterioCnx.getCamara() == null) {
			error = true;
			addStatusMessage(StatusMessage.Severity.ERROR, "#{messages['criterioCnx.camara']} :" + org.jboss.seam.international.Messages.instance().get("error_notnull"));
		}
//		if ((criterioCnx.getMateria() == null) && (criterioCnx.getTema() == null) && (criterioCnx.getObjetoJuicio() == null)  && (criterioCnx.getTipoCausa() == null)){
//			error = true;
//			addStatusMessage(StatusMessage.Severity.ERROR, "#{messages['criterioCnx.parentRequired']}");
//		}
		return error;
	}

	@Override
	public void beforeAdd(CriterioCnx criterioCnx) throws EntityOperationException {
		boolean error = false;
		if (criterioCnxSearch.findByUuid(criterioCnx.getUuid()) != null){
			error = true;
			addStatusMessage(StatusMessage.Severity.ERROR, org.jboss.seam.international.Messages.instance().get("error_duplicated_id") + " ("  + "UUID" + ")");
		}

		error |= checkRequired(criterioCnx);
		if (error) {
			throw new EntityOperationException();
		}
	}
	
	@Override
	public void beforeUpdate(CriterioCnx criterioCnx) throws EntityOperationException {
		boolean error = false;
		error |= checkRequired(criterioCnx);
		if (error) {
			throw new EntityOperationException();
		}
	}
	
	@Override
	public void beforeDelete(CriterioCnx criterioCnx) throws EntityOperationException {
		Long count;
		 count = (Long) getEntityManager()
			.createQuery("select count(*) from CondicionCnx where criterioCnx = :criterioCnx and status = 0") 
			.setParameter("criterioCnx", criterioCnx)
			.getSingleResult();
		if (count != null && count > 0) {
			throw new EntityOperationException(org.jboss.seam.international.Messages.instance().get("criterioCnx.condicionCnxList.list_exist"));
		}
	}

	@Override
	public void afterUpdate(CriterioCnx criterioCnx) throws EntityOperationException {
	}
	
	@Override
	public void afterAdd(CriterioCnx criterioCnx) throws EntityOperationException {
	}

	@Override
	public void afterDelete(CriterioCnx criterioCnx) throws EntityOperationException {
	}


	/**
	 * TODO Auto-generated method stub
	 */
	public void lookupListMultiple(String returnPage) {
		initializeLookup(criterioCnxSearch, new LookupEntitySelectionListener<CriterioCnx>(returnPage, CriterioCnx.class, true) {
			public void updateLookup(CriterioCnx entity) {
				// TODO replace this code by the appropriate multiselection action code for each item..			
			}
			@Override
			public void finishSelection() {
				super.finishSelection();
				// TODO add the appropriate ending code.			
			}
		});
	}
	
	public List<Materia> getMateriasCamara() {
		Camara camara = SessionState.instance().getGlobalCamara();
		if(camara != null){
			return camara.getMateriaList();
		}
		return null;
    }
}


