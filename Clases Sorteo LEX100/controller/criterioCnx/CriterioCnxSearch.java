package com.base100.lex100.controller.entity.criterioCnx;

import java.util.List;

import javax.faces.event.ValueChangeEvent;
import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.intercept.BypassInterceptors;

import com.base100.expand.seam.framework.entity.AbstractEntitySearch;
import com.base100.lex100.controller.entity.objetoJuicio.ObjetoJuicioSearch;
import com.base100.lex100.entity.Camara;
import com.base100.lex100.entity.CriterioCnx;
import com.base100.lex100.entity.Materia;
import com.base100.lex100.entity.ObjetoJuicio;
import com.base100.lex100.entity.Tema;
import com.base100.lex100.entity.TipoCausa;



/**
 * Class for CriterioCnx search filters.
 * 
 * Generated by Expand.
 *
 */
@Name("criterioCnxSearch")
@BypassInterceptors
public class CriterioCnxSearch extends AbstractEntitySearch<CriterioCnx>
{

	static public final String BY_UUID_STMT = 
		"FROM CriterioCnx criterioCnx WHERE " +
	    "criterioCnx.uuid = :uuid";
	static public final String BY_CAMARA_ONLY_STMT = 
		"FROM CriterioCnx criterioCnx WHERE " +
	    "criterioCnx.camara = :camara and criterioCnx.tipoCausa is null and criterioCnx.tema is null and criterioCnx.objetoJuicio is null and status = 0";

	private String nombre;
	private Camara camara;
	private Materia materia;
	private ObjetoJuicio objetoJuicio;
	private String objetoJuicioCodigo;
	private Tema tema;
	private TipoCausa tipoCausa;

	private CriterioCnxSearch filter;

	public CriterioCnxSearch() {
		setDefaultOrder("criterioCnx.id");
	}

	@Override
	public void clear() {
		this.nombre = null;
		this.camara = null;
		this.materia = null;
		this.objetoJuicio = null;
		this.objetoJuicioCodigo = null;
		this.tema = null;
		this.tipoCausa = null;
	}

	@Override
	public String getInitialPanelState()  {
		if (true
			&& this.nombre == null
			&& this.camara == null
			&& this.materia == null
			&& this.objetoJuicio == null
			&& this.tema == null
			&& this.tipoCausa == null

	    ){
			return getPanelState();
		} else {
			return "open";
		}
	}

	@Override
	public boolean hasActiveSearch() {
		// TODO Auto-generated method stub
		return false;
	}


    public CriterioCnx findByUuid(String uuid) {
    	return findByUuid (getEntityManager(), uuid); 
	}

    static public CriterioCnx findByUuid(EntityManager entityManager, String criterioCnxUuid) {
		Query query = entityManager.createQuery(BY_UUID_STMT);
		CriterioCnx criterioCnx = null;
		try {
			query.setParameter("uuid", criterioCnxUuid);
			criterioCnx = (CriterioCnx)query.getSingleResult();
		} catch (Exception e) {
		}
		return criterioCnx;
	}

    public List<CriterioCnx> findByCamara(Camara camara) {
    	return findByCamara (getEntityManager(), camara); 
	}

    @SuppressWarnings("unchecked")
	static public List<CriterioCnx> findByCamara(EntityManager entityManager, Camara camara) {
		Query query = entityManager.createQuery(BY_CAMARA_ONLY_STMT);
		List<CriterioCnx> criterioCnx = query.
			setParameter("camara", camara).
			getResultList();
		return criterioCnx;
	}

    /**
     * Returns the nombre search filter
     * 
     * @return	the nombre search filter
     */
    public String getNombre() {
    	return nombre;
    }

    /**
     * Sets the nombre search filter
     * 
     * @param nombre the nombre search filter
     */
    public void setNombre(String nombre) {
    	this.nombre = nombre;
    }
    
   /**
     * Clears the nombre search filter
     */
    public void clearNombre() {
    	setNombre(null);
    }

    /**
     * Returns the camara search filter
     * 
     * @return	the camara search filter
     */
    public Camara getCamara() {
    	return camara;
    }

    /**
     * Sets the camara search filter
     * 
     * @param camara the camara search filter
     */
    public void setCamara(Camara camara) {
    	this.camara = camara;
    }
    
   /**
     * Clears the camara search filter
     */
    public void clearCamara() {
    	setCamara(null);
    }

    /**
     * Returns the materia search filter
     * 
     * @return	the materia search filter
     */
    public Materia getMateria() {
    	return materia;
    }

    /**
     * Sets the materia search filter
     * 
     * @param materia the materia search filter
     */
    public void setMateria(Materia materia) {
    	this.materia = materia;
    }
    
   /**
     * Clears the materia search filter
     */
    public void clearMateria() {
    	setMateria(null);
    }

    /**
     * Returns the objetoJuicio search filter
     * 
     * @return	the objetoJuicio search filter
     */
    public ObjetoJuicio getObjetoJuicio() {
    	return objetoJuicio;
    }

    /**
     * Sets the objetoJuicio search filter
     * 
     * @param objetoJuicio the objetoJuicio search filter
     */
    public void setObjetoJuicio(ObjetoJuicio objetoJuicio) {
    	this.objetoJuicio = objetoJuicio;
		this.objetoJuicioCodigo = null;
    }
    
   /**
     * Clears the objetoJuicio search filter
     */
    public void clearObjetoJuicio() {
    	setObjetoJuicio(null);
    }

	public String getObjetoJuicioCodigo() {
		if(this.objetoJuicioCodigo == null){
			this.objetoJuicioCodigo = (getObjetoJuicio() != null)? getObjetoJuicio().getCodigo(): null;
		}
		return this.objetoJuicioCodigo;
	}

	public void setObjetoJuicioCodigo(String objetoJuicioCodigo) {
		this.objetoJuicioCodigo = objetoJuicioCodigo;
	}

	public void onChangeObjetoJuicioCodigo(ValueChangeEvent event) {
		setObjetoJuicioCodigo((String)(event.getNewValue()));
		updateObjetoJuicio();
	}
	
	private void updateObjetoJuicio() {
		setObjetoJuicio(ObjetoJuicioSearch.findByNaturalKey(getEntityManager(), this.objetoJuicioCodigo));
	}
	
    /**
     * Returns the tema search filter
     * 
     * @return	the tema search filter
     */
    public Tema getTema() {
    	return tema;
    }

    /**
     * Sets the tema search filter
     * 
     * @param tema the tema search filter
     */
    public void setTema(Tema tema) {
    	this.tema = tema;
    }
    
   /**
     * Clears the tema search filter
     */
    public void clearTema() {
    	setTema(null);
    }

    /**
     * Returns the tipoCausa search filter
     * 
     * @return	the tipoCausa search filter
     */
    public TipoCausa getTipoCausa() {
    	return tipoCausa;
    }

    /**
     * Sets the tema search filter
     * 
     * @param tipoCausa the tipoCausa search filter
     */
    public void setTipoCausa(TipoCausa tipoCausa) {
    	this.tipoCausa = tipoCausa;
    }
    
   /**
     * Clears the tipoCausa search filter
     */
    public void clearTipoCausa() {
    	setTipoCausa(null);
    }

	public CriterioCnxSearch getFilter() {
		if (filter == null) {
			filter = new CriterioCnxSearch();
		}
		return filter;
	}

    @Override
    public void updateFilters() {
		getFilter().setNombre(getNombre());
		getFilter().setCamara(getCamara());
		getFilter().setMateria(getMateria());
		getFilter().setObjetoJuicio(getObjetoJuicio());
		getFilter().setObjetoJuicioCodigo(getObjetoJuicioCodigo());
		getFilter().setTema(getTema());
	}


}

