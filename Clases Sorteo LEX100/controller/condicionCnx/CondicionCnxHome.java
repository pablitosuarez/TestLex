package com.base100.lex100.controller.entity.condicionCnx;

import java.util.ArrayList;
import java.util.List;

import javax.faces.model.SelectItem;

import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.international.StatusMessage;

import com.base100.expand.json.JSONException;
import com.base100.expand.json.JSONObject;
import com.base100.expand.seam.framework.entity.AbstractEntityHome;
import com.base100.expand.seam.framework.entity.EntityOperationException;
import com.base100.lex100.component.configuration.SessionState;
import com.base100.lex100.component.enumeration.ParametroPredefinidoEnumeration;
import com.base100.lex100.controller.entity.criterioCnx.CriterioCnxHome;
import com.base100.lex100.entity.CondicionCnx;
import com.base100.lex100.entity.CriterioCnx;
import com.base100.lex100.entity.Parametro;
import com.base100.lex100.manager.oficina.OficinaManager;

/**
 * Class for CondicionCnx Home objects.
 * 
 * Generated by Expand.
 *
 */
@Name("condicionCnxHome")
public class CondicionCnxHome extends AbstractEntityHome<CondicionCnx>
{
    @In(create=true)
    private CriterioCnxHome criterioCnxHome;
    @In(create=true)
    private CondicionCnxSearch condicionCnxSearch;
    @In(create=true)
    private ParametroPredefinidoEnumeration parametroPredefinidoEnumeration;
    
    private List<SelectItem> parametrosSelectItems;
    
    /**
     * Set/change the entity being managed by id.
     * 
     * @param id new instance id
     */
    public void setCondicionCnxId(Integer id) {
        setId(id);
    }

    /**
     * Returns the current instance id.
     * 
     * @return the current id.
     */
    public Integer getCondicionCnxId() {
        return (Integer) getId();
    }

    
    public boolean isWired() {
        return true;
    }

    /**
     * Get the managed entity, or null if the id is not defined.
     * 
     * @return the managed entity, if any.
     */
    public CondicionCnx getDefinedInstance() {
        return isIdDefined() ? getInstance() : null;
    }
 	

    @Override
	public String serializeId(CondicionCnx condicionCnx) {
		JSONObject jsonObject = new JSONObject();
		try {
			jsonObject.put("Id", condicionCnx.getId());
		} catch (JSONException e) {
		}
		return jsonObject.toString(); 
	}

// Lookups

// Validation

    @SuppressWarnings("unchecked")
	public List<SelectItem> getParametrosSelectItems(String noSelectionLabel) {
    	if (parametrosSelectItems == null) {
    		parametrosSelectItems = new ArrayList<SelectItem>();
    		if (noSelectionLabel != null) {
    			parametrosSelectItems.add(new SelectItem(null, noSelectionLabel));
    		}
    		parametrosSelectItems.addAll(parametroPredefinidoEnumeration.getItems());
    		
    		List<Parametro> parametrosDeUsuario = null;
    		if((criterioCnxHome.getInstance() != null) && (criterioCnxHome.getInstance().getObjetoJuicio() != null)){
    			parametrosDeUsuario = getParametrosByCriterio(criterioCnxHome.getInstance());
    		}else if (OficinaManager.instance().isNoPenal(SessionState.instance().getGlobalOficina())) {
    			parametrosDeUsuario = getEntityManager().createQuery("from Parametro where (camara is null or camara = #{sessionState.globalCamara}) and status != -1").getResultList();
    		}
    		if(parametrosDeUsuario != null){
	    		for(Parametro parametro: parametrosDeUsuario) {
	        		parametrosSelectItems.add(new SelectItem(parametro.getName(), parametro.getLabel()));
	    		}    			
    		}
    	}
    	return parametrosSelectItems;
    }
    
	private List<Parametro> getParametrosByCriterio(CriterioCnx criterioCnx) {
		if(criterioCnx.getObjetoJuicio() != null){
			return criterioCnx.getObjetoJuicio().getParametroList();
		}
		return null;
	}

// Operation event callbacks

	@Override
	public void afterSelect(){
	}

	@Override
	public void afterNew(CondicionCnx condicionCnx) {
        condicionCnx.setTipoComparacion("P");

        CriterioCnx criterioCnx=criterioCnxHome.getDefinedInstance();
        if ( criterioCnx!=null )
        {
			condicionCnx.setCriterioCnx(criterioCnx);

        }
        
        // settings of default values for properties can be inserted here

	}

	private boolean checkRequired(CondicionCnx condicionCnx) {
		boolean error = false;
		if (condicionCnx.getParametro() == null) {
			error = true;
			addStatusMessage(StatusMessage.Severity.ERROR, "#{messages['condicionCnx.parametro']} :" + org.jboss.seam.international.Messages.instance().get("error_notnull"));
		}
		if (condicionCnx.getTipoComparacion() == null) {
			error = true;
			addStatusMessage(StatusMessage.Severity.ERROR, "#{messages['condicionCnx.tipoComparacion']} :" + org.jboss.seam.international.Messages.instance().get("error_notnull"));
		}
		if (condicionCnx.getCriterioCnx() == null) {
			error = true;
			addStatusMessage(StatusMessage.Severity.ERROR, "#{messages['condicionCnx.criterioCnx']} :" + org.jboss.seam.international.Messages.instance().get("error_notnull"));
		}
		return error;
	}

	@Override
	public void beforeAdd(CondicionCnx condicionCnx) throws EntityOperationException {
		boolean error = false;
		if (condicionCnxSearch.findByUuid(condicionCnx.getUuid()) != null){
			error = true;
			addStatusMessage(StatusMessage.Severity.ERROR, org.jboss.seam.international.Messages.instance().get("error_duplicated_id") + " ("  + "UUID" + ")");
		}

		error |= checkRequired(condicionCnx);
		if (error) {
			throw new EntityOperationException();
		}
	}
	
	@Override
	public void beforeUpdate(CondicionCnx condicionCnx) throws EntityOperationException {
		boolean error = false;
		error |= checkRequired(condicionCnx);
		if (error) {
			throw new EntityOperationException();
		}
	}
	
	@Override
	public void beforeDelete(CondicionCnx condicionCnx) throws EntityOperationException {
	}

	@Override
	public void afterAdd(CondicionCnx condicionCnx) throws EntityOperationException {
	}


	@Override
	public void afterUpdate(CondicionCnx condicionCnx) throws EntityOperationException {
	}
	
	@Override
	public void afterDelete(CondicionCnx condicionCnx) throws EntityOperationException {
	}



}

